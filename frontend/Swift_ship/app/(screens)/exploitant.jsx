import { StyleSheet, Text, View, Image, TouchableOpacity, ScrollView, StatusBar, ActivityIndicator, Dimensions, Alert, Switch, BackHandler, FlatList, RefreshControl, TextInput } from 'react-native';
import React, { useContext, useState, useEffect, useMemo, useCallback  } from 'react';
import Notification from "../../assets/images/notification.svg";
import Dark_Notification from "../../assets/images/dark_notification.svg";
import { router } from "expo-router";
import ThemeContext from '../../theme/ThemeContext';
import ProtectedRoute from '../../components/ProtectedRoute/ProtectedRoute';
import { Ionicons } from '@expo/vector-icons';
import Toast from 'react-native-toast-message';
import AnnonceContext from '../../contexts/AnnonceContext';
import { useFonts, Montserrat_700Bold, Montserrat_600SemiBold, Montserrat_500Medium } from '@expo-google-fonts/montserrat';
import { useNavigation } from '@react-navigation/native';



const AnnonceCard = React.memo(({ item, darkMode, onPress, onDelete }) => (
  <TouchableOpacity 
    style={[
      styles.announceCard,
      { backgroundColor: darkMode ? '#363636' : '#F9F9F9' }
    ]}
    onPress={onPress}
    accessible={true}
    accessibilityLabel={`Annonce: ${item.title}`}
    accessibilityHint="Appuyez pour voir les détails de l'annonce"
    accessibilityRole="button"
  >
    <View style={[
      styles.cardImageContainer,
      { backgroundColor: darkMode ? '#444444' : '#E0E0E0' }
    ]}>
      {(item.imageUrl || (item.images && item.images.length > 0)) ? (
        <Image 
          source={{ uri: item.imageUrl || item.images[0] }} 
          style={styles.cardImage}
          resizeMode="cover"
        />
      ) : (
        <View style={styles.placeholderImageContainer}>
          <Ionicons 
            name={getCategoryIcon(item.category)} 
            size={30} 
            color={darkMode ? '#666666' : '#CCCCCC'} 
          />
        </View>
      )}
      <View style={[
        styles.categoryBadgeContainer, 
        {backgroundColor: getCategoryColor(item.category)}
      ]}>
        <Text style={styles.categoryBadge}>{item.category}</Text>
      </View>
    </View>
    <View style={styles.cardContent}>
      <Text style={[
        styles.cardTitle, 
        { color: darkMode ? '#FFFFFF' : '#39335E' }
      ]} numberOfLines={2}>
        {item.title}
      </Text>
      <Text style={[
        styles.cardType, 
        { color: darkMode ? '#AAAAAA' : '#666666' }
      ]}>
        {item.type}
      </Text>
      <View style={styles.cardFooter}>
        <Text style={[
          styles.cardDate, 
          { color: darkMode ? '#AAAAAA' : '#666666' }
        ]}>
          {formatDate(item.date)}
        </Text>
        
        {/* Bouton de suppression */}
        <TouchableOpacity 
          style={styles.deleteButton}
          onPress={(e) => {
            e.stopPropagation(); // Empêcher la propagation vers la carte
            onDelete(item.id);
          }}
          accessible={true}
          accessibilityLabel="Supprimer l'annonce"
          accessibilityHint="Appuyez pour supprimer cette annonce"
          accessibilityRole="button"
        >
          <Ionicons name="trash-outline" size={14} color="white" />
          <Text style={styles.deleteButtonText}>Effacer</Text>
        </TouchableOpacity>
      </View>
    </View>
  </TouchableOpacity>
));

// Fonctions utilitaires pour les annonces
const getCategoryIcon = (category) => {
  switch(category) {
    case 'Donner': return 'gift-outline';
    case 'Prêter': return 'swap-horizontal-outline';
    case 'Emprunter': return 'hand-left-outline';
    case 'Louer': return 'cash-outline';
    case 'Acheter': return 'cart-outline';
    case 'Échanger': return 'repeat-outline';
    default: return 'document-outline';
  }
};

const getCategoryColor = (category) => {
  switch(category) {
    case 'Donner': return '#4CAF50';
    case 'Prêter': return '#2196F3';
    case 'Emprunter': return '#FF9800';
    case 'Louer': return '#9C27B0';
    case 'Acheter': return '#F44336';
    case 'Échanger': return '#009688';
    default: return '#39335E';
  }
};

const formatDate = (dateString) => {
  if (!dateString) return "";
  
  // Vérifier si le format est correct
  const today = new Date();
  const date = new Date(dateString.split('/').reverse().join('-'));
  
  // Check if it's today
  if (date.toDateString() === today.toDateString()) {
    return "Aujourd'hui";
  }
  
  // Check if it's yesterday
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  if (date.toDateString() === yesterday.toDateString()) {
    return "Hier";
  }
  
  // Otherwise return the original format
  return dateString;
};

const AdminDashboard = () => {
    const { theme, darkMode, profileData } = useContext(ThemeContext);
    const { annonces, loading, refreshAnnonces, deleteAnnonce, cleanOldAnnonces, updateNewStatus } = useContext(AnnonceContext);
    const [refreshing, setRefreshing] = useState(false);
    const [activeTab, setActiveTab] = useState('dashboard'); // 'dashboard', 'annonces', 'users', 'settings'
    const [announcesModalVisible, setAnnouncesModalVisible] = useState(false);
    const [selectedCategory, setSelectedCategory] = useState('0'); // Catégorie sélectionnée
    const [searchQuery, setSearchQuery] = useState('');
    
    // Move the navigation hook inside the component
    const navigation = useNavigation();
    
    // Move handleLogout inside the component
    const handleLogout = () => {
      Alert.alert(
        "Déconnexion",
        "Êtes-vous sûr de vouloir vous déconnecter? Toutes vos données seront effacées de cet appareil.",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          {
            text: "Déconnexion",
            style: "destructive",
            onPress: async () => {
              const success = await logout();
              if (success) {
                Toast.show({
                  type: 'success',
                  text1: 'Déconnecté avec succès',
                  text2: 'À bientôt!',
                  visibilityTime: 3000
                });
                router.replace('/login');
              } else {
                Toast.show({
                  type: 'error',
                  text1: 'Erreur de déconnexion',
                  text2: 'Veuillez réessayer',
                  visibilityTime: 3000
                });
              }
            }
          }
        ]
      );
    };

    // Load fonts
    const [fontsLoaded] = useFonts({
      Montserrat_700Bold,
      Montserrat_600SemiBold,
      Montserrat_500Medium,
    });
    
    useEffect(() => {
      const backAction = () => {
        Alert.alert(
          "Confirmation", 
          "Voulez-vous vraiment quitter et retourner à la page précédente ?",
          [
            {
              text: "Annuler",
              onPress: () => null,
              style: "cancel"
            },
            { 
              text: "Oui", 
              onPress: () => router.back() 
            }
          ]
        );
        return true; 
      };

      const backHandler = BackHandler.addEventListener(
        "hardwareBackPress",
        backAction
      );

      return () => backHandler.remove(); // Nettoyage à la destruction du composant
    }, []);

    // Initialisation et récupération des données
    useEffect(() => {
      const initializeData = async () => {
        try {
          // Mettre à jour le statut "nouveau" des annonces
          await updateNewStatus();
          
          // Nettoyer les anciennes annonces (plus de 30 jours)
          const deletedCount = await cleanOldAnnonces(30);
          if (deletedCount > 0) {
            console.log(`${deletedCount} anciennes annonces supprimées`);
          }
          
          // Rafraîchir les annonces
          await refreshAnnonces();
        } catch (error) {
          console.error('Erreur d\'initialisation:', error);
        }
      };
      
      initializeData();
    }, []);

    // Catégories de filtrage
    const categories = [
      { id: '0', name: 'Tous' },
      { id: '1', name: 'Donner', icon: 'gift-outline' },
      { id: '2', name: 'Prêter', icon: 'swap-horizontal-outline' },
      { id: '3', name: 'Emprunter', icon: 'hand-left-outline' },
      { id: '4', name: 'Louer', icon: 'cash-outline' },
      { id: '5', name: 'Acheter', icon: 'cart-outline' },
      { id: '6', name: 'Échanger', icon: 'repeat-outline' }
    ];

    // États pour les données d'administration
    const [pendingUsers, setPendingUsers] = useState(7);
    const [totalUsers, setTotalUsers] = useState(4);
    const [visitStats, setVisitStats] = useState([13]);
    const [categoryStats, setCategoryStats] = useState([
      { name: 'Donner', count: 15, color: '#4CAF50' },
      { name: 'Prêter', count: 12, color: '#2196F3' },
      { name: 'Emprunter', count: 8, color: '#FF9800' },
      { name: 'Louer', count: 4, color: '#9C27B0' },
      { name: 'Acheter', count: 2, color: '#F44336' },
      { name: 'Échanger', count: 1, color: '#009688' }
    ]);
    
    // Actualiser le nombre total d'annonces
    useEffect(() => {
      if (annonces) {
        setTotalAnnounces(annonces.length);
      }
    }, [annonces]);
    
    const profileImage = profileData && profileData.profileImage 
      ? { uri: profileData.profileImage } 
      : require('../../assets/images/placeholder.png');

    const adminName = profileData && profileData.fullName 
      ? profileData.fullName 
      : 'Administrateur';
      
    // Simulons des annonces à modérer
    const [annoncesToModerate, setAnnoncesToModerate] = useState([
      {
        id: 'm1',
        title: 'Pantalon de ski Rouge',
        category: 'Prêter',
        status: 'Signalé',
        reason: 'Contact externe',
        date: '04/05/2025',
        reporter: 'Marie Dubois',
        type: 'Vêtement',
        campType: 'Camp De Ski',
        size: '10-12 ans',
        imageUrl: null
      },
      {
        id: 'm2',
        title: 'Bottes de randonnée',
        category: 'Donner',
        status: 'Signalé',
        reason: 'Contenu inapproprié',
        date: '01/05/2025',
        reporter: 'Jean Martin',
        type: 'Chaussures',
        campType: 'Camp Vert',
        imageUrl: null
      },
      {
        id: 'm3',
        title: 'Bonnet et gants de ski',
        category: 'Vendre',
        status: 'Signalé',
        reason: 'Prix excessif',
        date: '30/04/2025',
        reporter: 'Sophie Blanc',
        type: 'Accessoire',
        campType: 'Camp De Ski',
        imageUrl: null
      },
    ]);
    
    // États pour les utilisateurs en attente de validation
    const [pendingUsersList, setPendingUsersList] = useState([
      { id: 'u1', name: 'Thomas Leroux', email: 'thomas.l@gmail.com', date: '04/05/2025', status: 'En attente' },
      { id: 'u2', name: 'Claire Fontaine', email: 'claire.f@gmail.com', date: '03/05/2025', status: 'En attente' },
      { id: 'u3', name: 'Marc Dubois', email: 'marc.d@gmail.com', date: '02/05/2025', status: 'En attente' },
      { id: 'u4', name: 'Julie Moreau', email: 'julie.m@gmail.com', date: '01/05/2025', status: 'En attente' },
      { id: 'u5', name: 'Luc Bernard', email: 'luc.b@gmail.com', date: '30/04/2025', status: 'En attente' },
      { id: 'u6', name: 'Sophie Moreau', email: 'sophie.m@gmail.com', date: '29/04/2025', status: 'En attente' },
      { id: 'u7', name: 'Paul Girard', email: 'paul.g@gmail.com', date: '28/04/2025', status: 'En attente' },
    ]);
    
    // Paramètres de sécurité
    const [securitySettings, setSecuritySettings] = useState({
      requireEmailVerification: true,
      moderateAllPosts: false,
      allowExternalLinks: false,
      restrictContactInfo: true,
      autoDeleteInactive: true
    });
    
    // Fonction pour rafraîchir les données
    const onRefresh = useCallback(async () => {
      setRefreshing(true);
      try {
        await refreshAnnonces();
        await updateNewStatus();
      } catch (error) {
        console.error('Erreur lors du rafraîchissement:', error);
      } finally {
        setRefreshing(false);
      }
    }, [refreshAnnonces, updateNewStatus]);
    
    // Nombre total d'annonces
    const [totalAnnounces, setTotalAnnounces] = useState(0);
    
    // Filter annonces based on category and search
    const filteredAnnonces = useMemo(() => {
      return annonces.filter(item => {
        const matchesCategory = selectedCategory === '0' || 
          item.category === categories.find(cat => cat.id === selectedCategory)?.name;
        
        const matchesSearch = !searchQuery || 
          item.title?.toLowerCase().includes(searchQuery.toLowerCase()) || 
          item.type?.toLowerCase().includes(searchQuery.toLowerCase());
        
        return matchesCategory && matchesSearch;
      });
    }, [annonces, selectedCategory, searchQuery, categories]);
    
    // Fonction pour approuver un utilisateur
    const approveUser = (userId) => {
      Alert.alert(
        "Confirmer l'approbation",
        "Voulez-vous vraiment approuver cet utilisateur ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Approuver", 
            onPress: () => {
              // Logique d'approbation
              const updatedUsers = pendingUsersList.filter(user => user.id !== userId);
              setPendingUsersList(updatedUsers);
              setPendingUsers(pendingUsers - 1);
              setTotalUsers(totalUsers + 1);
              Toast.show({
                type: 'success',
                text1: 'Utilisateur approuvé',
                visibilityTime: 2000,
              });
            }
          }
        ]
      );
    };
    
    // Fonction pour rejeter un utilisateur
    const rejectUser = (userId) => {
      Alert.alert(
        "Confirmer le rejet",
        "Voulez-vous vraiment rejeter cet utilisateur ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Rejeter", 
            onPress: () => {
              // Logique de rejet
              const updatedUsers = pendingUsersList.filter(user => user.id !== userId);
              setPendingUsersList(updatedUsers);
              setPendingUsers(pendingUsers - 1);
              Toast.show({
                type: 'success',
                text1: 'Utilisateur rejeté',
                visibilityTime: 2000,
              });
            }
          }
        ]
      );
    };
    
    // Fonction pour approuver une annonce
    const approveAnnounce = (announceId) => {
      Alert.alert(
        "Approuver l'annonce",
        "Cette annonce sera approuvée et restera visible. Continuer ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Approuver", 
            onPress: () => {
              const updatedAnnounces = annoncesToModerate.filter(announce => announce.id !== announceId);
              setAnnoncesToModerate(updatedAnnounces);
              setFlaggedAnnounces(flaggedAnnounces - 1);
              Toast.show({
                type: 'success',
                text1: 'Annonce approuvée',
                visibilityTime: 2000,
              });
            }
          }
        ]
      );
    };
    
    // Fonction pour rejeter une annonce
    const rejectAnnounce = (announceId) => {
      Alert.alert(
        "Rejeter l'annonce",
        "Cette annonce sera supprimée définitivement. Continuer ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Supprimer", 
            onPress: () => {
              const updatedAnnounces = annoncesToModerate.filter(announce => announce.id !== announceId);
              setAnnoncesToModerate(updatedAnnounces);
              setFlaggedAnnounces(flaggedAnnounces - 1);
              setTotalAnnounces(totalAnnounces - 1);
              Toast.show({
                type: 'success',
                text1: 'Annonce supprimée',
                visibilityTime: 2000,
              });
            }
          }
        ]
      );
    };
    
    // Fonction pour supprimer une annonce
    const handleDeleteAnnonce = useCallback((id) => {
      Alert.alert(
        "Confirmation de suppression",
        "Êtes-vous sûr de vouloir supprimer cette annonce ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          {
            text: "Supprimer",
            style: "destructive",
            onPress: async () => {
              // Afficher un indicateur de chargement pendant la suppression
              
              // Appeler la fonction de suppression du contexte
              const success = await deleteAnnonce(id);
              
              // Afficher un message de succès ou d'erreur
              if (success) {
                Toast.show({
                  type: 'success',
                  text1: 'Annonce supprimée avec succès',
                  visibilityTime: 2000,
                });
                
                // Mettre à jour le nombre total d'annonces
                setTotalAnnounces(prev => prev - 1);
              } else {
                Toast.show({
                  type: 'error',
                  text1: 'Erreur lors de la suppression',
                  text2: 'Veuillez réessayer',
                  visibilityTime: 2000,
                });
              }
            }
          }
        ]
      );
    }, [deleteAnnonce]);
    
    // Fonction pour réinitialiser le système
    const resetSystem = () => {
      Alert.alert(
        "Réinitialisation du système",
        "Cette action supprimera toutes les annonces et réinitialisera les statistiques. Cette action est irréversible et devrait être effectuée une fois par année scolaire. Voulez-vous continuer ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Réinitialiser", 
            onPress: () => {
              Alert.alert(
                "Confirmation finale",
                "Dernière vérification : êtes-vous absolument sûr de vouloir réinitialiser le système ?",
                [
                  {
                    text: "Annuler",
                    style: "cancel"
                  },
                  {
                    text: "Réinitialiser",
                    onPress: () => {
                      // Réinitialisation des données
                      setTotalAnnounces(0);
                      setAnnoncesToModerate([]);
                      setVisitStats([0, 0, 0, 0, 0, 0, 0]);
                      setCategoryStats([
                        { name: 'Donner', count: 0, color: '#4CAF50' },
                        { name: 'Prêter', count: 0, color: '#2196F3' },
                        { name: 'Emprunter', count: 0, color: '#FF9800' },
                        { name: 'Louer', count: 0, color: '#9C27B0' },
                        { name: 'Acheter', count: 0, color: '#F44336' },
                        { name: 'Échanger', count: 0, color: '#009688' }
                      ]);
                      setFlaggedAnnounces(0);
                      // On garde les utilisateurs validés
                      Toast.show({
                        type: 'success',
                        text1: 'Système réinitialisé pour la nouvelle année',
                        visibilityTime: 3000,
                      });
                    }
                  }
                ]
              );
            }
          }
        ]
      );
    };
    
    const toggleSetting = (setting) => {
      setSecuritySettings({
        ...securitySettings,
        [setting]: !securitySettings[setting]
      });
    };
    
    // Optimiser les fonctions de rendu pour la FlatList
    const keyExtractor = useCallback((item) => item.id.toString(), []);
    
    const renderItem = useCallback(({ item }) => (
      <AnnonceCard 
        item={item}
        darkMode={darkMode}
        onPress={() => router.push(`/annonce/${item.id}`)}
        onDelete={handleDeleteAnnonce}
      />
    ), [darkMode, handleDeleteAnnonce]);
    
    // Show loading indicator when fonts are loading or data is loading
    if (!fontsLoaded) {
      return (
        <View style={[styles.loadingContainer, {backgroundColor: theme.background}]}>
          <ActivityIndicator size="large" color="#39335E" />
        </View>
      );
    }

    // Fonction de rendu des onglets
    const renderTabContent = () => {
      switch (activeTab) {
        case 'annonces':
          return (
            <View style={styles.tabContent}>
              {/* En-tête avec filtre et recherche */}
              <View style={styles.announcesHeader}>
                <Text style={[styles.sectionTitle, {color: theme.color}]}>Liste des annonces</Text>
                <Text style={[styles.announcesCount, {color: theme.secondaryText}]}>
                  {filteredAnnonces.length} annonce{filteredAnnonces.length !== 1 ? 's' : ''}
                </Text>
              </View>
              
              {/* Filtres par catégorie */}
              <ScrollView 
                horizontal 
                showsHorizontalScrollIndicator={false} 
                style={styles.categoriesContainer}
                contentContainerStyle={styles.categoriesContentContainer}
              >
                {categories.map(category => (
                  <TouchableOpacity
                    key={category.id}
                    style={[
                      styles.categoryButton, 
                      selectedCategory === category.id && styles.activeCategoryButton,
                      { backgroundColor: darkMode ? '#363636' : '#F0F0F0' }
                    ]}
                    onPress={() => setSelectedCategory(category.id)}
                  >
                    {category.icon && (
                      <View style={[
                        styles.categoryIconContainer,
                        { backgroundColor: selectedCategory === category.id 
                          ? (darkMode ? '#ffffff' : '#39335E')
                          : (darkMode ? '#5D5FEF' : '#E6E6FA') 
                        }
                      ]}>
                        <Ionicons 
                          name={category.icon} 
                          size={20} 
                          color={selectedCategory === category.id 
                            ? (darkMode ? '#363636' : '#ffffff')
                            : (darkMode ? '#FFFFFF' : '#5D5FEF')
                          } 
                        />
                      </View>
                    )}
                    <Text 
                      style={[
                        styles.categoryText, 
                        selectedCategory === category.id && styles.activeCategoryText,
                        {color: selectedCategory === category.id 
                          ? '#FFFFFF' 
                          : (darkMode ? '#FFFFFF' : '#39335E')
                        }
                      ]}
                      numberOfLines={1}
                    >
                      {category.name}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
              
              {/* Barre de recherche */}
              <View style={[styles.searchContainer, {backgroundColor: theme.cardbg2 || (darkMode ? '#2A2A2A' : '#F0F0F0')}]}>
                <Ionicons name="search" size={22} color={darkMode ? '#888888' : '#666666'} />
                <TextInput
                  style={[styles.searchInput, {color: theme.color}]}
                  placeholder="Rechercher une annonce..."
                  placeholderTextColor={darkMode ? '#888888' : '#A8A8A8'}
                  value={searchQuery}
                  onChangeText={setSearchQuery}
                  returnKeyType="search"
                />
                {searchQuery ? (
                  <TouchableOpacity onPress={() => setSearchQuery('')}>
                    <Ionicons name="close-circle" size={22} color={darkMode ? '#888888' : '#666666'} />
                  </TouchableOpacity>
                ) : null}
              </View>
              
              {/* Liste des annonces */}
              {loading ? (
                <View style={styles.loadingContainer}>
                  <ActivityIndicator size="large" color="#39335E" />
                </View>
              ) : filteredAnnonces.length === 0 ? (
                <View style={[styles.emptyContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <Ionicons name="alert-circle" size={48} color="#FF9800" />
                  <Text style={[styles.emptyText, {color: theme.color}]}>
                    Aucune annonce trouvée
                  </Text>
                  <Text style={[styles.emptySubtext, {color: theme.secondaryText}]}>
                    Essayez de modifier vos filtres ou publiez une annonce
                  </Text>
                </View>
              ) : (
                <FlatList
                  data={filteredAnnonces}
                  keyExtractor={keyExtractor}
                  renderItem={renderItem}
                  showsVerticalScrollIndicator={false}
                  contentContainerStyle={styles.announcesListContainer}
                  refreshControl={
                    <RefreshControl 
                      refreshing={refreshing} 
                      onRefresh={onRefresh}
                      colors={['#39335E', '#EB001B']}
                      tintColor={darkMode ? '#FFFFFF' : '#39335E'}
                    />
                  }
                />
              )}
            </View>
          );
          
        case 'users':
          return (
            <View style={styles.tabContent}>
              {/* Section validation utilisateurs */}
              <View style={styles.usersSection}>
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Validation utilisateurs</Text>
                  <Text style={[styles.usersCount, {color: theme.secondaryText}]}>{pendingUsers} utilisateur(s) en attente</Text>
                </View>
                
                {pendingUsersList.length > 0 ? (
                  pendingUsersList.map(user => (
                    <View 
                      key={user.id} 
                      style={[styles.userCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}
                    >
                      <View style={styles.userInfo}>
                        <Text style={[styles.userName, {color: theme.color}]}>{user.name}</Text>
                        <Text style={[styles.userEmail, {color: theme.secondaryText}]}>{user.email}</Text>
                        <Text style={[styles.userDate, {color: theme.secondaryText}]}>Demande le {user.date}</Text>
                      </View>
                      
                      <View style={styles.userActions}>
                        <TouchableOpacity 
                          style={[styles.approveUserButton, {backgroundColor: '#4CAF50'}]}
                          onPress={() => approveUser(user.id)}
                        >
                          <Ionicons name="checkmark" size={16} color="#FFFFFF" />
                          <Text style={styles.approveUserButtonText}>Approuver</Text>
                        </TouchableOpacity>
                        <TouchableOpacity 
                          style={[styles.rejectUserButton, {backgroundColor: '#F44336'}]}
                          onPress={() => rejectUser(user.id)}
                        >
                          <Ionicons name="close" size={16} color="#FFFFFF" />
                          <Text style={styles.rejectUserButtonText}>Rejeter</Text>
                        </TouchableOpacity>
                      </View>
                    </View>
                  ))
                ) : (
                  <View style={[styles.emptyContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                    <Ionicons name="checkmark-circle" size={48} color="#4CAF50" />
                    <Text style={[styles.emptyText, {color: theme.color}]}>
                      Aucun utilisateur en attente
                    </Text>
                  </View>
                )}
              </View>
            </View>
          );
          
        case 'settings':
          return (
            <View style={styles.tabContent}>
              {/* Section paramètres de sécurité */}
              <View style={styles.securitySection}>
              <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Paramètres de sécurité</Text>
                </View>
                
                <View style={[styles.securityCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Vérification par email</Text>
                      <Text style={[styles.settingDescription, {color: theme.secondaryText}]}>Exiger une vérification d'email avant validation</Text>
                    </View>
                    <Switch
                      value={securitySettings.requireEmailVerification}
                      onValueChange={() => toggleSetting('requireEmailVerification')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                  
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Modérer toutes les annonces</Text>
                      <Text style={[styles.settingDescription, {color: theme.secondaryText}]}>Valider manuellement chaque annonce avant publication</Text>
                    </View>
                    <Switch
                      value={securitySettings.moderateAllPosts}
                      onValueChange={() => toggleSetting('moderateAllPosts')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                  
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Liens externes</Text>
                      <Text style={[styles.settingDescription, {color: theme.secondaryText}]}>Autoriser les liens externes dans les descriptions</Text>
                    </View>
                    <Switch
                      value={securitySettings.allowExternalLinks}
                      onValueChange={() => toggleSetting('allowExternalLinks')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                  
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Restreindre coordonnées</Text>
                      <Text style={[styles.settingDescription, {color: theme.secondaryText}]}>Masquer numéros et emails dans les annonces</Text>
                    </View>
                    <Switch
                      value={securitySettings.restrictContactInfo}
                      onValueChange={() => toggleSetting('restrictContactInfo')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                  
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Suppression automatique</Text>
                      <Text style={[styles.settingDescription, {color: theme.secondaryText}]}>Supprimer les annonces inactives après 30 jours</Text>
                    </View>
                    <Switch
                      value={securitySettings.autoDeleteInactive}
                      onValueChange={() => toggleSetting('autoDeleteInactive')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                </View>
              </View>
              
              {/* Section maintenance */}
              <View style={styles.maintenanceSection}>
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Maintenance système</Text>
                </View>
                
                <View style={[styles.maintenanceCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <View style={styles.maintenanceIconContainer}>
                    <Ionicons name="refresh-circle" size={48} color="#FF9800" />
                  </View>
                  <Text style={[styles.maintenanceTitle, {color: theme.color}]}>Réinitialisation annuelle</Text>
                  <Text style={[styles.maintenanceDescription, {color: theme.secondaryText}]}>
                    Cette action supprimera toutes les annonces et réinitialisera les statistiques pour la nouvelle année scolaire.
                    Cette opération est irréversible et ne devrait être effectuée qu'une fois par an.
                  </Text>
                  <TouchableOpacity
                    style={[styles.resetButton, {backgroundColor: '#FF9800'}]}
                    onPress={resetSystem}
                  >
                    <Ionicons name="refresh" size={18} color="#FFFFFF" />
                    <Text style={styles.resetButtonText}>Réinitialiser le système</Text>
                  </TouchableOpacity>
                </View>
                
                <View style={[styles.maintenanceCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <View style={styles.maintenanceIconContainer}>
                    <Ionicons name="cloud-download" size={48} color="#2196F3" />
                  </View>
                  <Text style={[styles.maintenanceTitle, {color: theme.color}]}>Sauvegarde des données</Text>
                  <Text style={[styles.maintenanceDescription, {color: theme.secondaryText}]}>
                    Téléchargez une sauvegarde complète des données utilisateurs et des annonces avant
                    la réinitialisation du système.
                  </Text>
                  <TouchableOpacity
                    style={[styles.backupButton, {backgroundColor: '#2196F3'}]}
                  >
                    <Ionicons name="download" size={18} color="#FFFFFF" />
                    <Text style={styles.backupButtonText}>Télécharger la sauvegarde</Text>
                  </TouchableOpacity>
                </View>
              </View>


              <View style={styles.logoutSection}>
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Session utilisateur</Text>
                </View>
                
                <View style={[styles.maintenanceCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <View style={styles.maintenanceIconContainer}>
                    <Ionicons name="log-out" size={48} color="#E53935" />
                  </View>
                  <Text style={[styles.maintenanceTitle, {color: theme.color}]}>Déconnexion</Text>
                  <Text style={[styles.maintenanceDescription, {color: theme.secondaryText}]}>
                    Déconnectez-vous de votre compte et retournez à la page de connexion. 
                    Toutes vos données resteront sauvegardées.
                  </Text>
                  <TouchableOpacity
                    style={[styles.logoutButton, {backgroundColor: '#E53935'}]}
                    onPress={handleLogout}
                  >
                    <Ionicons name="exit-outline" size={18} color="#FFFFFF" />
                    <Text style={styles.logoutButtonText}>Se déconnecter</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          );
        
        default:
          // Dashboard par défaut
          return (
            <View style={styles.tabContent}>
              {/* Section statistiques */}
              <View style={styles.statsContainer}>
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Statistiques</Text>
                </View>
                
                <View style={styles.statsCards}>
                  <View style={[styles.statsCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                    <Ionicons name="people" size={28} color="#5D5FEF" />
                    <Text style={[styles.statsNumber, {color: theme.color}]}>{totalUsers}</Text>
                    <Text style={[styles.statsLabel, {color: theme.secondaryText}]}>Utilisateurs</Text>
                  </View>
                  
                  <View style={[styles.statsCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                    <Ionicons name="document-text" size={28} color="#5D5FEF" />
                    <Text style={[styles.statsNumber, {color: theme.color}]}>{totalAnnounces}</Text>
                    <Text style={[styles.statsLabel, {color: theme.secondaryText}]}>Annonces</Text>
                  </View>
                  
                  <View style={[styles.statsCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow, marginLeft: 80 }]}>
                    <Ionicons name="eye" size={28} color="#5D5FEF" />
                    <Text style={[styles.statsNumber, {color: theme.color}]}>{visitStats.reduce((a, b) => a + b, 0)}</Text>
                    <Text style={[styles.statsLabel, {color: theme.secondaryText}]}>Visites (7j)</Text>
                  </View>
                </View>
                
                {/* Graphiques des statistiques */}
                <View style={[styles.chartContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <Text style={[styles.chartTitle, {color: theme.color}]}>Visites quotidiennes</Text>
                  <View style={styles.chartPlaceholder}>
                    <Text style={{textAlign: 'center', color: theme.secondaryText}}>
                      Graphique des visites quotidiennes
                    </Text>
                  </View>
                </View>
                
                <View style={[styles.chartContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <Text style={[styles.chartTitle, {color: theme.color}]}>Répartition des annonces</Text>
                  <View style={styles.chartPlaceholder}>
                    <Text style={{textAlign: 'center', color: theme.secondaryText}}>
                      Graphique de répartition des catégories d'annonces
                    </Text>
                  </View>
                </View>
                
                <TouchableOpacity style={[styles.exportButton, {backgroundColor: '#5D5FEF'}]}>
                  <Ionicons name="download" size={20} color="#FFFFFF" />
                  <Text style={styles.exportButtonText}>Exporter les statistiques</Text>
                </TouchableOpacity>
              </View>
              
              {/* Section modération */}
              <View style={styles.moderationSection}>
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Modération</Text>
                  <Text style={[styles.moderationCount, {color: theme.secondaryText}]}>{annoncesToModerate.length} annonce(s) à modérer</Text>
                </View>
                
                {annoncesToModerate.length > 0 ? (
                  annoncesToModerate.map(item => (
                    <View 
                      key={item.id} 
                      style={[styles.moderationCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}
                    >
                      <View style={styles.moderationHeader}>
                        {/* <View style={styles.moderationTitleContainer}>
                          <Text style={[styles.moderationTitle, {color: theme.color}]}>{item.title}</Text>
                          <View style={[styles.statusBadge, {backgroundColor: '#F44336'}]}>
                            <Text style={styles.statusText}>{item.status}</Text>
                          </View>
                        </View>
                        <Text style={[styles.moderationDate, {color: theme.secondaryText}]}>Publié le {item.date}</Text>
                        <Text style={[styles.moderationReason, {color: theme.color}]}>
                          <Text style={{fontWeight: '600'}}>Motif du signalement:</Text> {item.reason}
                        </Text>
                        <Text style={[styles.moderationReporter, {color: theme.color}]}>
                          <Text style={{fontWeight: '600'}}>Signalé par:</Text> {item.reporter}
                        </Text> */}
                      </View>
                      
                      <View style={styles.moderationDetails}>
                        <View style={styles.moderationDetail}>
                          <Text style={[styles.moderationDetailLabel, {color: theme.secondaryText}]}>Catégorie:</Text>
                          <Text style={[styles.moderationDetailValue, {color: theme.color}]}>{item.category}</Text>
                        </View>
                        <View style={styles.moderationDetail}>
                          <Text style={[styles.moderationDetailLabel, {color: theme.secondaryText}]}>Type:</Text>
                          <Text style={[styles.moderationDetailValue, {color: theme.color}]}>{item.type}</Text>
                        </View>
                        <View style={styles.moderationDetail}>
                          <Text style={[styles.moderationDetailLabel, {color: theme.secondaryText}]}>Camp:</Text>
                          <Text style={[styles.moderationDetailValue, {color: theme.color}]}>{item.campType}</Text>
                        </View>
                        {item.size && (
                          <View style={styles.moderationDetail}>
                            <Text style={[styles.moderationDetailLabel, {color: theme.secondaryText}]}>Taille:</Text>
                            <Text style={[styles.moderationDetailValue, {color: theme.color}]}>{item.size}</Text>
                          </View>
                        )}
                      </View>
                      
                      <View style={styles.moderationActions}>
                        <TouchableOpacity 
                          style={[styles.viewButton, {backgroundColor: '#2196F3'}]}
                          onPress={() => router.push(`/annonce/${item.id}`)}  
                        >
                          <Ionicons name="eye" size={16} color="#FFFFFF" />
                          <Text style={styles.viewButtonText}>Voir</Text>
                        </TouchableOpacity>
                        
                        <TouchableOpacity 
                          style={[styles.approveButton, {backgroundColor: '#4CAF50'}]}
                          onPress={() => approveAnnounce(item.id)}
                        >
                          <Ionicons name="checkmark" size={16} color="#FFFFFF" />
                          <Text style={styles.approveButtonText}>Approuver</Text>
                        </TouchableOpacity>
                        
                        <TouchableOpacity 
                          style={[styles.rejectButton, {backgroundColor: '#F44336'}]}
                          onPress={() => rejectAnnounce(item.id)}
                        >
                          <Ionicons name="close" size={16} color="#FFFFFF" />
                          <Text style={styles.rejectButtonText}>Rejeter</Text>
                        </TouchableOpacity>
                      </View>
                    </View>
                  ))
                ) : (
                  <View style={[styles.emptyContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                    <Ionicons name="checkmark-circle" size={48} color="#4CAF50" />
                    <Text style={[styles.emptyText, {color: theme.color}]}>
                      Aucune annonce à modérer
                    </Text>
                  </View>
                )}
              </View>
            </View>
          );
      }
    };

    // Composant principal de l'interface
    return (
      <View style={[styles.container, {backgroundColor: theme.background}]}> 
        <StatusBar translucent backgroundColor="transparent" barStyle={darkMode ? "light-content" : 'dark-content'} />

        {/* En-tête avec profil */}
        <View style={styles.header}>
          <View style={styles.header_left}>
            <Image source={profileImage} style={styles.profile} />
            <View style={styles.content}>
              <Text style={[styles.heading_text, {color: theme.secondaryText}]}>Tableau de bord Exploitant</Text>
              <Text style={[styles.heading, {color: theme.color}]}>{adminName}</Text>
            </View>
          </View>
          {/* <TouchableOpacity style={styles.notification_box} onPress={() => {}}>
            {darkMode ? <Dark_Notification style={styles.notification} /> : <Notification style={styles.notification} />}
            <View style={styles.circle}>
              <Text style={styles.notification_count}>{flaggedAnnounces + pendingUsers}</Text>
            </View>
          </TouchableOpacity> */}
        </View> 

        {/* Navigation entre les onglets */}
        <View style={styles.tabsContainer}>
          <TouchableOpacity
            style={[
              styles.tab,
              activeTab === 'dashboard' && styles.activeTab,
              { backgroundColor: activeTab === 'dashboard' ? (darkMode ? '#2A2A2A' : '#FFFFFF') : 'transparent' }
            ]}
            onPress={() => setActiveTab('dashboard')}
          >
            <Ionicons
              name="grid"
              size={20}
              color={activeTab === 'dashboard' ? '#5D5FEF' : (darkMode ? '#888888' : '#666666')}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'dashboard' && styles.activeTabText,
                { color: activeTab === 'dashboard' ? '#5D5FEF' : (darkMode ? '#AAAAAA' : '#666666') }
              ]}
            >
              Tableau
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[
              styles.tab,
              activeTab === 'annonces' && styles.activeTab,
              { backgroundColor: activeTab === 'annonces' ? (darkMode ? '#2A2A2A' : '#FFFFFF') : 'transparent' }
            ]}
            onPress={() => setActiveTab('annonces')}
          >
            <Ionicons
              name="document-text"
              size={20}
              color={activeTab === 'annonces' ? '#5D5FEF' : (darkMode ? '#888888' : '#666666')}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'annonces' && styles.activeTabText,
                { color: activeTab === 'annonces' ? '#5D5FEF' : (darkMode ? '#AAAAAA' : '#666666') }
              ]}
            >
              Annonces
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[
              styles.tab,
              activeTab === 'users' && styles.activeTab,
              { backgroundColor: activeTab === 'users' ? (darkMode ? '#2A2A2A' : '#FFFFFF') : 'transparent' }
            ]}
            onPress={() => setActiveTab('users')}
          >
            <Ionicons
              name="people"
              size={19}
              color={activeTab === 'users' ? '#5D5FEF' : (darkMode ? '#888888' : '#666666')}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'users' && styles.activeTabText,
                { color: activeTab === 'users' ? '#5D5FEF' : (darkMode ? '#AAAAAA' : '#666666') }
              ]}
            >
              Utilisateurs
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[
              styles.tab,
              activeTab === 'settings' && styles.activeTab,
              { backgroundColor: activeTab === 'settings' ? (darkMode ? '#2A2A2A' : '#FFFFFF') : 'transparent' }
            ]}
            onPress={() => setActiveTab('settings')}
          >
            <Ionicons
              name="settings"
              size={19}
              color={activeTab === 'settings' ? '#5D5FEF' : (darkMode ? '#888888' : '#666666')}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'settings' && styles.activeTabText,
                { color: activeTab === 'settings' ? '#5D5FEF' : (darkMode ? '#AAAAAA' : '#666666') }
              ]}
            >
              Paramètres
            </Text>
          </TouchableOpacity>
        </View>

        {/* Contenu principal qui change selon l'onglet sélectionné */}
        <ScrollView 
          showsVerticalScrollIndicator={false} 
          contentContainerStyle={styles.scrollContent}
          refreshControl={
            <RefreshControl 
              refreshing={refreshing} 
              onRefresh={onRefresh}
              colors={['#39335E', '#EB001B']}
              tintColor={darkMode ? '#FFFFFF' : '#39335E'}
            />
          }
        >
          <View style={styles.adminHeader}>
            <Text style={[styles.adminTitle, {color: theme.color}]}>Bourse au prêt - Administration</Text>
            <Text style={[styles.adminSubtitle, {color: theme.secondaryText}]}>Gestion, modération et statistiques</Text>
          </View>
          
          {/* Contenu de l'onglet actif */}
          {renderTabContent()}
        </ScrollView>
      </View>
    );
};

export default AdminDashboard;




const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 60,
    paddingHorizontal: 16,
  },
  scrollContent: {
    paddingBottom: 40,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 15,
    marginBottom: 20,
  },
  header_left: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  profile: {
    width: 50,
    height: 50,
    borderRadius: 25,
    marginRight: 12,
    borderWidth: 2,
    borderColor: '#5D5FEF',
  },
  content: {
    justifyContent: 'center',
  },
  heading_text: {
    fontSize: 14,
    fontWeight: '500',
    marginBottom: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  heading: {
    fontSize: 20,
    fontWeight: '700',
    fontFamily: 'Montserrat_700Bold',
  },
  notification_box: {
    position: 'relative',
    width: 44,
    height: 44,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F0F2F5',
    borderRadius: 12,
  },
  notification: {
    width: 24,
    height: 24,
  },
  circle: {
    position: 'absolute',
    top: -4,
    right: -4,
    backgroundColor: '#F44336',
    borderRadius: 12,
    width: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#FFFFFF',
  },
  notification_count: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  adminHeader: {
    marginBottom: 24,
    alignItems: 'center',
  },
  adminTitle: {
    fontSize: 26,
    fontWeight: '700',
    marginBottom: 8,
    fontFamily: 'Montserrat_700Bold',
  },
  adminSubtitle: {
    fontSize: 16,
    fontWeight: '400',
    fontFamily: 'Montserrat_500Medium',
  },
  // Styles pour les onglets
  tabsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
    borderRadius: 12,
    padding: 5,
    backgroundColor: 'rgba(200, 200, 200, 0.1)',
  },
  tab: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 10,
    borderRadius: 10,
    flexDirection: 'row',
    justifyContent: 'center',
  },
  activeTab: {
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  tabText: {
    marginLeft: 6,
    fontSize: 10,
    marginLeft: 1,
    fontFamily: 'Montserrat_600SemiBold',
  },
  activeTabText: {
    fontFamily: 'Montserrat_700Bold',
  },
  tabContent: {
    flex: 1,
  },
  // Styles pour le tableau de bord
  statsContainer: {
    marginBottom: 32,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  statsCards: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  statsCard: {
    width: '48%',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    alignItems: 'center',
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  statsNumber: {
    fontSize: 24,
    fontWeight: '700',
    marginVertical: 8,
    fontFamily: 'Montserrat_700Bold',
  },
  statsLabel: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  chartContainer: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 20,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  chartTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 12,
    fontFamily: 'Montserrat_600SemiBold',
  },
  chartPlaceholder: {
    height: 150,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F0F2F5',
    borderRadius: 8,
  },
  exportButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
    borderRadius: 12,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  exportButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  // Styles pour la section de modération
  moderationSection: {
    marginBottom: 32,
  },
  moderationCount: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  moderationCard: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  moderationHeader: {
    marginBottom: 12,
  },
  moderationTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  moderationTitle: {
    fontSize: 18,
    fontWeight: '600',
    flex: 1,
    fontFamily: 'Montserrat_600SemiBold',
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  statusText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  moderationDate: {
    fontSize: 14,
    fontWeight: '400',
    marginBottom: 8,
    fontFamily: 'Montserrat_500Medium',
  },
  moderationReason: {
    fontSize: 14,
    marginBottom: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  moderationReporter: {
    fontSize: 14,
    fontFamily: 'Montserrat_500Medium',
  },
  moderationDetails: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12,
  },
  moderationDetail: {
    width: '50%',
    marginBottom: 8,
  },
  moderationDetailLabel: {
    fontSize: 14,
    fontWeight: '500',
    marginBottom: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  moderationDetailValue: {
    fontSize: 14,
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  moderationActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  viewButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  viewButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  approveButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  approveButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  rejectButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
  },
  rejectButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  emptyContainer: {
    padding: 24,
    borderRadius: 12,
    alignItems: 'center',
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  emptyText: {
    fontSize: 16,
    fontWeight: '500',
    marginTop: 12,
    textAlign: 'center',
    fontFamily: 'Montserrat_500Medium',
  },
  emptySubtext: {
    fontSize: 14,
    marginTop: 8,
    textAlign: 'center',
    fontFamily: 'Montserrat_500Medium',
  },
  // Styles pour la section users
  usersSection: {
    marginBottom: 32,
  },
  usersCount: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  userCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  userInfo: {
    flex: 1,
  },
  userName: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
    fontFamily: 'Montserrat_600SemiBold',
  },
  userEmail: {
    fontSize: 14,
    fontWeight: '400',
    marginBottom: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  userDate: {
    fontSize: 14,
    fontWeight: '400',
    fontFamily: 'Montserrat_500Medium',
  },
  userActions: {
    flexDirection: 'row',
  },
  approveUserButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  approveUserButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  rejectUserButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
  },
  rejectUserButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  // Styles pour la section security
  securitySection: {
    marginBottom: 32,
  },
  securityCard: {
    padding: 16,
    borderRadius: 12,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  settingTextContainer: {
    flex: 1,
    marginRight: 12,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
    fontFamily: 'Montserrat_600SemiBold',
  },
  settingDescription: {
    fontSize: 14,
    fontWeight: '400',
    fontFamily: 'Montserrat_500Medium',
  },
  // Styles pour la section maintenance
  maintenanceSection: {
    marginBottom: 32,
  },
  maintenanceCard: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    alignItems: 'center',
  },
  maintenanceIconContainer: {
    marginBottom: 12,
  },
  maintenanceTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  maintenanceDescription: {
    fontSize: 14,
    fontWeight: '400',
    textAlign: 'center',
    marginBottom: 16,
    fontFamily: 'Montserrat_500Medium',
  },
  resetButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
    borderRadius: 12,
    width: '80%',
  },
  resetButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  backupButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
    borderRadius: 12,
    width: '80%',
  },
  backupButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  // Styles pour les annonces
  announceCard: {
    flexDirection: 'row',
    borderRadius: 12,
    marginBottom: 16,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    overflow: 'hidden',
  },
  cardImageContainer: {
    width: 120,
    height: 120,
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  cardImage: {
    width: '100%',
    height: '100%',
  },
  placeholderImageContainer: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  categoryBadgeContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    paddingVertical: 4,
    paddingHorizontal: 8,
    alignItems: 'center',
  },
  categoryBadge: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  cardContent: {
    flex: 1,
    padding: 12,
    justifyContent: 'space-between',
  },
  cardTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
    fontFamily: 'Montserrat_600SemiBold',
  },
  cardType: {
    fontSize: 14,
    marginBottom: 8,
    fontFamily: 'Montserrat_500Medium',
  },
  cardFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  cardDate: {
    fontSize: 12,
    fontFamily: 'Montserrat_500Medium',
  },
  deleteButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F44336',
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 6,
  },
  deleteButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    marginLeft: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  // Styles pour annonces list
  announcesHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  announcesCount: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  categoriesContainer: {
    marginBottom: 16,
  },
  categoriesContentContainer: {
    paddingRight: 16,
  },
  categoryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 25,
    marginRight: 10,
  },
  activeCategoryButton: {
    backgroundColor: '#5D5FEF',
  },
  categoryIconContainer: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 8,
  },
  categoryText: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  activeCategoryText: {
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 12,
    marginBottom: 16,
  },
  searchInput: {
    flex: 1,
    marginLeft: 10,
    fontSize: 16,
    fontFamily: 'Montserrat_500Medium',
  },
  announcesListContainer: {
    paddingBottom: 20,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  logoutSection: {
    marginBottom: 20,
  },
  logoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 15,
  },
  logoutButtonText: {
    color: '#FFFFFF',
    fontWeight: '600',
    fontSize: 16,
    marginLeft: 8,
  },
  
});