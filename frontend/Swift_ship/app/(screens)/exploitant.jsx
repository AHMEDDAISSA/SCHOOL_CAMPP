import { StyleSheet, Text, View, Image, TouchableOpacity, ScrollView, StatusBar, ActivityIndicator, Dimensions, Alert, Switch, BackHandler, FlatList, RefreshControl, TextInput  } from 'react-native';
import React, { useContext, useState, useEffect, useMemo, useCallback, useRef  } from 'react';
import Notification from "../../assets/images/notification.svg";
import Dark_Notification from "../../assets/images/dark_notification.svg";
import { router } from "expo-router";
import ThemeContext from '../../theme/ThemeContext';
import ProtectedRoute from '../../components/ProtectedRoute/ProtectedRoute';
import { Ionicons } from '@expo/vector-icons';
import Toast from 'react-native-toast-message';
import AnnonceContext from '../../contexts/AnnonceContext';
import { useFonts, Montserrat_700Bold, Montserrat_600SemiBold, Montserrat_500Medium } from '@expo-google-fonts/montserrat';
import { useNavigation } from '@react-navigation/native';
import { LineChart, PieChart } from 'react-native-chart-kit';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import { captureRef } from 'react-native-view-shot';
import { AuthContext } from '../../services/AuthContext';
import * as Linking from 'expo-linking';
import * as FileSystem from 'expo-file-system'; 






const AnnonceCard = React.memo(({ item, darkMode, onPress, onDelete }) => (
  <TouchableOpacity 
    style={[
      styles.announceCard,
      { backgroundColor: darkMode ? '#363636' : '#F9F9F9' }
    ]}
    onPress={onPress}
    accessible={true}
    accessibilityLabel={`Annonce: ${item.title}`}
    accessibilityHint="Appuyez pour voir les détails de l'annonce"
    accessibilityRole="button"
  >
    <View style={[
      styles.cardImageContainer,
      { backgroundColor: darkMode ? '#444444' : '#E0E0E0' }
    ]}>
      {(item.imageUrl || (item.images && item.images.length > 0)) ? (
        <Image 
          source={{ uri: item.imageUrl || item.images[0] }} 
          style={styles.cardImage}
          resizeMode="cover"
        />
      ) : (
        <View style={styles.placeholderImageContainer}>
          <Ionicons 
            name={getCategoryIcon(item.category)} 
            size={30} 
            color={darkMode ? '#666666' : '#CCCCCC'} 
          />
        </View>
      )}
      <View style={[
        styles.categoryBadgeContainer, 
        {backgroundColor: getCategoryColor(item.category)}
      ]}>
        <Text style={styles.categoryBadge}>{item.category}</Text>
      </View>
    </View>
    <View style={styles.cardContent}>
      <Text style={[
        styles.cardTitle, 
        { color: darkMode ? '#FFFFFF' : '#39335E' }
      ]} numberOfLines={2}>
        {item.title}
      </Text>
      <Text style={[
        styles.cardType, 
        { color: darkMode ? '#AAAAAA' : '#666666' }
      ]}>
        {item.type}
      </Text>
      <View style={styles.cardFooter}>
        <Text style={[
          styles.cardDate, 
          { color: darkMode ? '#AAAAAA' : '#666666' }
        ]}>
          {formatDate(item.date)}
        </Text>
        
        {/* Bouton de suppression */}
        <TouchableOpacity 
          style={styles.deleteButton}
          onPress={(e) => {
            e.stopPropagation(); // Empêcher la propagation vers la carte
            onDelete(item.id);
          }}
          accessible={true}
          accessibilityLabel="Supprimer l'annonce"
          accessibilityHint="Appuyez pour supprimer cette annonce"
          accessibilityRole="button"
        >
          <Ionicons name="trash-outline" size={14} color="white" />
          <Text style={styles.deleteButtonText}>Effacer</Text>
        </TouchableOpacity>
      </View>
    </View>
  </TouchableOpacity>
));

// Fonctions utilitaires pour les annonces
const getCategoryIcon = (category) => {
  switch(category) {
    case 'Donner': return 'gift-outline';
    case 'Prêter': return 'swap-horizontal-outline';
    case 'Emprunter': return 'hand-left-outline';
    case 'Louer': return 'cash-outline';
    case 'Acheter': return 'cart-outline';
    case 'Échanger': return 'repeat-outline';
    default: return 'document-outline';
  }
};

const getCategoryColor = (category) => {
  switch(category) {
    case 'Donner': return '#4CAF50';
    case 'Prêter': return '#2196F3';
    case 'Emprunter': return '#FF9800';
    case 'Louer': return '#9C27B0';
    case 'Acheter': return '#F44336';
    case 'Échanger': return '#009688';
    default: return '#39335E';
  }
};

const formatDate = (dateString) => {
  if (!dateString) return "";
  
  // Vérifier si le format est correct
  const today = new Date();
  const date = new Date(dateString.split('/').reverse().join('-'));
  
  // Check if it's today
  if (date.toDateString() === today.toDateString()) {
    return "Aujourd'hui";
  }
  
  // Check if it's yesterday
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  if (date.toDateString() === yesterday.toDateString()) {
    return "Hier";
  }
  
  // Otherwise return the original format
  return dateString;
};

const AdminDashboard = () => {
    const { theme, darkMode, profileData } = useContext(ThemeContext);
    const { logout } = useContext(AuthContext);
    const { annonces, loading, refreshAnnonces, deleteAnnonce, cleanOldAnnonces, updateNewStatus } = useContext(AnnonceContext);
    const [refreshing, setRefreshing] = useState(false);
    const [activeTab, setActiveTab] = useState('dashboard'); // 'dashboard', 'annonces', 'users', 'settings'
    const [announcesModalVisible, setAnnouncesModalVisible] = useState(false);
    const [selectedCategory, setSelectedCategory] = useState('0'); // Catégorie sélectionnée
    const [searchQuery, setSearchQuery] = useState('');
    const screenWidth = Dimensions.get('window').width - 32;
    const lineChartRef = useRef(null);
    const pieChartRef = useRef(null);
    
    
    // Move the navigation hook inside the component
    const navigation = useNavigation();
    
    const [isLoggingOut, setIsLoggingOut] = useState(false);

const handleLogout = () => {
  Alert.alert(
    "Déconnexion",
    "Êtes-vous sûr de vouloir vous déconnecter? Toutes vos données seront effacées de cet appareil.",
    [
      {
        text: "Annuler",
        style: "cancel"
      },
      {
        text: "Déconnexion",
        style: "destructive",
        onPress: async () => {
          if (isLoggingOut) return;
          setIsLoggingOut(true);
          
          try {
            // Check if logout function exists before calling it
            if (typeof logout === 'function') {
              const success = await logout();
              if (success) {
                Toast.show({
                  type: 'success',
                  text1: 'Déconnecté avec succès',
                  text2: 'À bientôt!',
                  visibilityTime: 3000
                });
                router.replace('/login');
              } else {
                throw new Error('Erreur de déconnexion');
              }
            } else {
              // Fallback if logout function is not available
              console.error('Logout function is not available');
              router.replace('/login');
            }
          } catch (error) {
            console.error('Logout error:', error);
            Toast.show({
              type: 'error',
              text1: 'Erreur de déconnexion',
              text2: 'Veuillez réessayer',
              visibilityTime: 3000
            });
          } finally {
            setIsLoggingOut(false);
          }
        }
      }
    ]
  );
};

    const generateStatsPDF = async () => {
  try {
    // Show loading indicator
    setRefreshing(true);

    Toast.show({
      type: 'info',
      text1: 'Génération du PDF...',
      text2: 'Veuillez patienter',
      visibilityTime: 2000,
    });

    // Capture charts as base64 images
    let lineChartImage = '';
    let pieChartImage = '';

    if (lineChartRef.current) {
      const lineChartUri = await captureRef(lineChartRef, {
        format: 'png',
        quality: 0.9,
      });
      lineChartImage = `<img src="file://${lineChartUri}" style="width: 100%; max-width: 600px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />`;
    }

    if (pieChartRef.current) {
      const pieChartUri = await captureRef(pieChartRef, {
        format: 'png',
        quality: 0.9,
      });
      pieChartImage = `<img src="file://${pieChartUri}" style="width: 100%; max-width: 600px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />`;
    }

    // Create date string for the report
    const today = new Date();
    const dateString = today.toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });

    // Calculate additional statistics
    const totalVisits = visitStats.reduce((a, b) => a + b, 0);
    const avgVisitsPerDay = totalVisits > 0 ? Math.round(totalVisits / 7) : 0;
    const mostPopularCategory = categoryStats.reduce((prev, current) =>
      prev.count > current.count ? prev : current
    );
    const totalCategoryCount = categoryStats.reduce((sum, cat) => sum + cat.count, 0);

    // HTML content for PDF (same as original)
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
        <style>
          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
          
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body {
            font-family: 'Inter', 'Helvetica Neue', Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #2d3748;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
          }
          
          .container {
            max-width: 800px;
            margin: 0 auto;
            background: #ffffff;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
          }
          
          .header {
            background: linear-gradient(135deg, #5D5FEF 0%, #7C3AED 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
          }
          
          .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: float 6s ease-in-out infinite;
          }
          
          @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
          }
          
          .header h1 {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 10px;
            position: relative;
            z-index: 1;
          }
          
          .header .subtitle {
            font-size: 16px;
            font-weight: 400;
            opacity: 0.9;
            position: relative;
            z-index: 1;
          }
          
          .date-badge {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 12px 24px;
            border-radius: 50px;
            margin: 20px auto 0;
            display: inline-block;
            font-weight: 500;
            position: relative;
            z-index: 1;
          }
          
          .content {
            padding: 40px 30px;
          }
          
          .section {
            margin-bottom: 40px;
          }
          
          .section h2 {
            font-size: 24px;
            font-weight: 600;
            color: #1a202c;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 3px solid #5D5FEF;
            position: relative;
          }
          
          .section h2::after {
            content: '';
            position: absolute;
            bottom: -3px;
            left: 0;
            width: 50px;
            height: 3px;
            background: linear-gradient(90deg, #5D5FEF, #7C3AED);
            border-radius: 2px;
          }
          
          .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
          }
          
          .stat-card {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border: 1px solid #e2e8f0;
            border-radius: 16px;
            padding: 25px 20px;
            text-align: center;
            transition: transform 0.3s ease;
            position: relative;
            overflow: hidden;
          }
          
          .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #5D5FEF, #7C3AED);
            border-radius: 16px 16px 0 0;
          }
          
          .stat-number {
            font-size: 36px;
            font-weight: 700;
            color: #5D5FEF;
            margin: 10px 0;
            text-shadow: 0 2px 4px rgba(93, 95, 239, 0.2);
          }
          
          .stat-label {
            font-size: 14px;
            font-weight: 500;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
          }
          
          .stat-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, #5D5FEF, #7C3AED);
            border-radius: 12px;
            margin: 0 auto 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
          }
          
          .chart-container {
            background: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 16px;
            padding: 30px;
            margin: 25px 0;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            text-align: center;
          }
          
          .chart-title {
            font-size: 20px;
            font-weight: 600;
            color: #1a202c;
            margin-bottom: 20px;
            text-align: center;
          }
          
          .insights-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 30px 0;
          }
          
          .insight-card {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border-left: 4px solid #0ea5e9;
            border-radius: 12px;
            padding: 20px;
          }
          
          .insight-card.success {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border-left-color: #22c55e;
          }
          
          .insight-card.warning {
            background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
            border-left-color: #f59e0b;
          }
          
          .insight-title {
            font-size: 16px;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 8px;
          }
          
          .insight-text {
            font-size: 14px;
            color: #64748b;
            line-height: 1.5;
          }
          
          .category-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
          }
          
          .category-table th {
            background: linear-gradient(135deg, #5D5FEF, #7C3AED);
            color: white;
            padding: 15px 20px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
          }
          
          .category-table td {
            padding: 15px 20px;
            border-bottom: 1px solid #f1f5f9;
            font-size: 14px;
          }
          
          .category-table tr:last-child td {
            border-bottom: none;
          }
          
          .category-table tr:nth-child(even) {
            background-color: #f8fafc;
          }
          
          .color-indicator {
            display: inline-block;
            width: 16px;
            height: 16px;
            border-radius: 4px;
            margin-right: 10px;
            vertical-align: middle;
            border: 2px solid rgba(255, 255, 255, 0.8);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          }
          
          .percentage-bar {
            background: #e2e8f0;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
            margin: 5px 0;
          }
          
          .percentage-fill {
            height: 100%;
            background: linear-gradient(90deg, #5D5FEF, #7C3AED);
            border-radius: 4px;
            transition: width 0.3s ease;
          }
          
          .footer {
            background: #f8fafc;
            border-top: 1px solid #e2e8f0;
            padding: 30px;
            text-align: center;
            color: #64748b;
            font-size: 14px;
          }
          
          .footer-logo {
            font-size: 18px;
            font-weight: 600;
            color: #5D5FEF;
            margin-bottom: 10px;
          }
          
          .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
          }
          
          .summary-card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
          }
          
          .summary-value {
            font-size: 24px;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 5px;
          }
          
          .summary-label {
            font-size: 12px;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
          }
          
          .highlight {
            background: linear-gradient(135deg, #fef3c7, #fbbf24);
            color: #92400e;
            padding: 2px 8px;
            border-radius: 6px;
            font-weight: 600;
          }
          
          .divider {
            height: 1px;
            background: linear-gradient(90deg, transparent, #e2e8f0, transparent);
            margin: 30px 0;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>📊 Bourse au prêt</h1>
            <div class="subtitle">Rapport de statistiques détaillé</div>
            <div class="date-badge">Généré le ${dateString}</div>
          </div>
          
          <div class="content">
            <div class="section">
              <h2>📈 Vue d'ensemble</h2>
              <div class="stats-grid">
                <div class="stat-card">
                  <div class="stat-icon">👥</div>
                  <div class="stat-number">${totalUsers}</div>
                  <div class="stat-label">Utilisateurs actifs</div>
                </div>
                <div class="stat-card">
                  <div class="stat-icon">📝</div>
                  <div class="stat-number">${totalAnnounces}</div>
                  <div class="stat-label">Annonces publiées</div>
                </div>
                <div class="stat-card">
                  <div class="stat-icon">👁️</div>
                  <div class="stat-number">${totalVisits}</div>
                  <div class="stat-label">Visites (7 jours)</div>
                </div>
                <div class="stat-card">
                  <div class="stat-icon">📊</div>
                  <div class="stat-number">${avgVisitsPerDay}</div>
                  <div class="stat-label">Visites/jour (moy.)</div>
                </div>
              </div>
              
              <div class="insights-grid">
                <div class="insight-card success">
                  <div class="insight-title">🎯 Catégorie populaire</div>
                  <div class="insight-text">
                    <span class="highlight">${mostPopularCategory.name}</span> est la catégorie la plus utilisée avec ${mostPopularCategory.count} annonces.
                  </div>
                </div>
                <div class="insight-card">
                  <div class="insight-title">📅 Activité hebdomadaire</div>
                  <div class="insight-text">
                    Moyenne de <span class="highlight">${avgVisitsPerDay} visites</span> par jour sur les 7 derniers jours.
                  </div>
                </div>
                <div class="insight-card warning">
                  <div class="insight-title">💡 Recommandation</div>
                  <div class="insight-text">
                    ${totalAnnounces > 50 ? 'Excellent engagement ! Continuez à encourager les publications.' : 'Pensez à promouvoir la plateforme pour augmenter les annonces.'}
                  </div>
                </div>
              </div>
            </div>

            <div class="divider"></div>

            <div class="section">
              <h2>📊 Analyse des visites</h2>
              <div class="chart-container">
                <div class="chart-title">Évolution des visites sur 7 jours</div>
                ${lineChartImage}
                <div class="summary-cards">
                  <div class="summary-card">
                    <div class="summary-value">${Math.max(...visitStats)}</div>
                    <div class="summary-label">Pic de visites</div>
                  </div>
                  <div class="summary-card">
                    <div class="summary-value">${Math.min(...visitStats)}</div>
                    <div class="summary-label">Minimum</div>
                  </div>
                  <div class="summary-card">
                    <div class="summary-value">${avgVisitsPerDay}</div>
                    <div class="summary-label">Moyenne</div>
                  </div>
                </div>
              </div>
            </div>

            <div class="divider"></div>

            <div class="section">
              <h2>🎯 Répartition des annonces</h2>
              <div class="chart-container">
                <div class="chart-title">Distribution par catégorie</div>
                ${pieChartImage}
              </div>
              
              <table class="category-table">
                <thead>
                  <tr>
                    <th>Catégorie</th>
                    <th>Nombre</th>
                    <th>Pourcentage</th>
                    <th>Répartition</th>
                  </tr>
                </thead>
                <tbody>
                  ${categoryStats.map(stat => {
                    const percentage = totalCategoryCount > 0 ? 
                      ((stat.count / totalCategoryCount) * 100).toFixed(1) : 0;
                    return `
                      <tr>
                        <td>
                          <span class="color-indicator" style="background-color: ${stat.color};"></span>
                          <strong>${stat.name}</strong>
                        </td>
                        <td><strong>${stat.count}</strong> annonce${stat.count !== 1 ? 's' : ''}</td>
                        <td><strong>${percentage}%</strong></td>
                        <td>
                          <div class="percentage-bar">
                            <div class="percentage-fill" style="width: ${percentage}%;"></div>
                          </div>
                        </td>
                      </tr>
                    `;
                  }).join('')}
                </tbody>
              </table>
            </div>

            <div class="divider"></div>

            <div class="section">
              <h2>📋 Résumé exécutif</h2>
              <div class="insights-grid">
                <div class="insight-card">
                  <div class="insight-title">📈 Croissance</div>
                  <div class="insight-text">
                    La plateforme compte actuellement <strong>${totalUsers} utilisateurs</strong> et 
                    <strong>${totalAnnounces} annonces</strong> actives.
                  </div>
                </div>
                <div class="insight-card success">
                  <div class="insight-title">🎯 Performance</div>
                  <div class="insight-text">
                    Avec <strong>${totalVisits} visites</strong> cette semaine, l'engagement utilisateur 
                    ${totalVisits > 50 ? 'est excellent' : 'peut être amélioré'}.
                  </div>
                </div>
                <div class="insight-card warning">
                  <div class="insight-title">🔍 Opportunités</div>
                  <div class="insight-text">
                    ${categoryStats.filter(cat => cat.count === 0).length > 0 ? 
                      `Certaines catégories (${categoryStats.filter(cat => cat.count === 0).map(cat => cat.name).join(', ')}) n'ont pas d'annonces.` :
                      'Toutes les catégories sont utilisées, excellent équilibre !'
                    }
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="footer">
            <div class="footer-logo">🎓 Bourse au prêt</div>
            <div>Tableau de bord exploitant • Généré automatiquement</div>
            <div style="margin-top: 10px; font-size: 12px;">
              © ${new Date().getFullYear()} - Rapport confidentiel à usage interne uniquement
            </div>
          </div>
        </div>
      </body>
      </html>
    `;

    // Open PDF directly in a viewer
    await Print.printAsync({
      html: htmlContent,
      width: 612,
      height: 792,
      margins: {
        left: 20,
        top: 20,
        right: 20,
        bottom: 20,
      },
    });

    Toast.show({
      type: 'success',
      text1: 'PDF ouvert avec succès',
      text2: 'Le rapport est affiché à l\'écran',
      visibilityTime: 3000,
    });
  } catch (error) {
    console.error("Erreur lors de l'ouverture du PDF:", error);
    Alert.alert(
      "Erreur",
      "Une erreur s'est produite lors de l'ouverture du PDF. Veuillez réessayer.",
      [{ text: "OK" }]
    );

    Toast.show({
      type: 'error',
      text1: 'Erreur d\'ouverture',
      text2: 'Impossible d\'afficher le PDF',
      visibilityTime: 3000,
    });
  } finally {
    // Hide loading indicator
    setRefreshing(false);
  }
};

    // Load fonts
    const [fontsLoaded] = useFonts({
      Montserrat_700Bold,
      Montserrat_600SemiBold,
      Montserrat_500Medium,
    });
    
    useEffect(() => {
      const backAction = () => {
        Alert.alert(
          "Confirmation", 
          "Voulez-vous vraiment quitter et retourner à la page précédente ?",
          [
            {
              text: "Annuler",
              onPress: () => null,
              style: "cancel"
            },
            { 
              text: "Oui", 
              onPress: () => router.back() 
            }
          ]
        );
        return true; 
      };

      const backHandler = BackHandler.addEventListener(
        "hardwareBackPress",
        backAction
      );

      return () => backHandler.remove(); // Nettoyage à la destruction du composant
    }, []);

    useEffect(() => {
  if (annonces && annonces.length > 0) {
    // Initialiser un objet pour compter les annonces par catégorie
    const categoryCounts = {
      'Donner': 0,
      'Prêter': 0,
      'Emprunter': 0,
      'Louer': 0,
      'Acheter': 0,
      'Échanger': 0
    };
    
    // Compter les annonces par catégorie
    annonces.forEach(annonce => {
      if (categoryCounts.hasOwnProperty(annonce.category)) {
        categoryCounts[annonce.category]++;
      }
    });
    const updatedCategoryStats = [
      { name: 'Donner', count: categoryCounts['Donner'], color: '#4CAF50' },
      { name: 'Prêter', count: categoryCounts['Prêter'], color: '#2196F3' },
      { name: 'Emprunter', count: categoryCounts['Emprunter'], color: '#FF9800' },
      { name: 'Louer', count: categoryCounts['Louer'], color: '#9C27B0' },
      { name: 'Acheter', count: categoryCounts['Acheter'], color: '#F44336' },
      { name: 'Échanger', count: categoryCounts['Échanger'], color: '#009688' }
    ];
    
    // Filtrer pour n'afficher que les catégories qui ont au moins une annonce
    const filteredStats = updatedCategoryStats.filter(cat => cat.count > 0);
    
    // Mettre à jour l'état
    setCategoryStats(filteredStats.length > 0 ? filteredStats : updatedCategoryStats);
  }
}, [annonces]);

    useEffect(() => {
  // Créer des données de visites basées sur le nombre d'annonces
  // Plus il y a d'annonces, plus il y a de visites (simulation)
  if (annonces && annonces.length > 0) {
    const baseVisits = Math.max(5, Math.floor(annonces.length / 2));
    const visitVariation = () => Math.floor(Math.random() * baseVisits);
    
    const weekVisits = [
      baseVisits + visitVariation(),
      baseVisits + visitVariation(),
      baseVisits + visitVariation(),
      baseVisits + 2 * visitVariation(), // Plus de visites en milieu de semaine
      baseVisits + 2 * visitVariation(),
      baseVisits - Math.floor(visitVariation() / 2), // Moins de visites le weekend
      baseVisits - Math.floor(visitVariation() / 2)
    ];
    
    setVisitStats(weekVisits);
  }
}, [annonces]);

const [flaggedAnnounces, setFlaggedAnnounces] = useState(0);

// Mettez à jour cet état quand les annonces à modérer changent
useEffect(() => {
  if (annoncesToModerate) {
    setFlaggedAnnounces(annoncesToModerate.length);
  }
}, [annoncesToModerate]);

    // Initialisation et récupération des données
    useEffect(() => {
      const initializeData = async () => {
        try {
          // Mettre à jour le statut "nouveau" des annonces
          await updateNewStatus();
          
          // Nettoyer les anciennes annonces (plus de 30 jours)
          const deletedCount = await cleanOldAnnonces(30);
          if (deletedCount > 0) {
            console.log(`${deletedCount} anciennes annonces supprimées`);
          }
          
          // Rafraîchir les annonces
          await refreshAnnonces();
        } catch (error) {
          console.error('Erreur d\'initialisation:', error);
        }
      };
      
      initializeData();
    }, []);

    const [statsPeriod, setStatsPeriod] = useState('week'); // 'week', 'month', 'year'

// Boutons de filtre à ajouter avant les graphiques
<View style={styles.periodFilterContainer}>
  <TouchableOpacity 
    style={[
      styles.periodButton, 
      statsPeriod === 'week' && styles.activePeriodButton
    ]}
    onPress={() => setStatsPeriod('week')}
  >
    <Text style={[
      styles.periodButtonText,
      statsPeriod === 'week' && styles.activePeriodButtonText
    ]}>
      Semaine
    </Text>
  </TouchableOpacity>
  
  <TouchableOpacity 
    style={[
      styles.periodButton, 
      statsPeriod === 'month' && styles.activePeriodButton
    ]}
    onPress={() => setStatsPeriod('month')}
  >
    <Text style={[
      styles.periodButtonText,
      statsPeriod === 'month' && styles.activePeriodButtonText
    ]}>
      Mois
    </Text>
  </TouchableOpacity>
  
  <TouchableOpacity 
    style={[
      styles.periodButton, 
      statsPeriod === 'year' && styles.activePeriodButton
    ]}
    onPress={() => setStatsPeriod('year')}
  >
    <Text style={[
      styles.periodButtonText,
      statsPeriod === 'year' && styles.activePeriodButtonText
    ]}>
      Année
    </Text>
  </TouchableOpacity>
</View>
    

    // Catégories de filtrage
    const categories = [
      { id: '0', name: 'Tous' },
      { id: '1', name: 'Donner', icon: 'gift-outline' },
      { id: '2', name: 'Prêter', icon: 'swap-horizontal-outline' },
      { id: '3', name: 'Emprunter', icon: 'hand-left-outline' },
      { id: '4', name: 'Louer', icon: 'cash-outline' },
      { id: '5', name: 'Acheter', icon: 'cart-outline' },
      { id: '6', name: 'Échanger', icon: 'repeat-outline' }
    ];

    // États pour les données d'administration
    const [pendingUsers, setPendingUsers] = useState(7);
    const [totalUsers, setTotalUsers] = useState(9);
    const [visitStats, setVisitStats] = useState([13]);
    const [categoryStats, setCategoryStats] = useState([
      { name: 'Donner', count: 15, color: '#4CAF50' },
      { name: 'Prêter', count: 12, color: '#2196F3' },
      { name: 'Emprunter', count: 8, color: '#FF9800' },
      { name: 'Louer', count: 4, color: '#9C27B0' },
      { name: 'Acheter', count: 2, color: '#F44336' },
      { name: 'Échanger', count: 1, color: '#009688' }
    ]);
    
    // Actualiser le nombre total d'annonces
    useEffect(() => {
      if (annonces) {
        setTotalAnnounces(annonces.length);
      }
    }, [annonces]);
    
    const profileImage = profileData && profileData.profileImage 
      ? { uri: profileData.profileImage } 
      : require('../../assets/images/placeholder.png');

    const adminName = profileData && profileData.fullName 
      ? profileData.fullName 
      : 'Administrateur';
      
    // Simulons des annonces à modérer
    const [annoncesToModerate, setAnnoncesToModerate] = useState([
      {
        id: 'm1',
        title: 'Pantalon de ski Rouge',
        category: 'Prêter',
        status: 'Signalé',
        reason: 'Contact externe',
        date: '04/05/2025',
        reporter: 'Marie Dubois',
        type: 'Vêtement',
        campType: 'Camp De Ski',
        size: '10-12 ans',
        imageUrl: null
      },
      {
        id: 'm2',
        title: 'Bottes de randonnée',
        category: 'Donner',
        status: 'Signalé',
        reason: 'Contenu inapproprié',
        date: '01/05/2025',
        reporter: 'Jean Martin',
        type: 'Chaussures',
        campType: 'Camp Vert',
        imageUrl: null
      },
      {
        id: 'm3',
        title: 'Bonnet et gants de ski',
        category: 'Vendre',
        status: 'Signalé',
        reason: 'Prix excessif',
        date: '30/04/2025',
        reporter: 'Sophie Blanc',
        type: 'Accessoire',
        campType: 'Camp De Ski',
        imageUrl: null
      },
    ]);
    
    // États pour les utilisateurs en attente de validation
    const [pendingUsersList, setPendingUsersList] = useState([
      { id: 'u1', name: 'Thomas Leroux', email: 'thomas.l@gmail.com', date: '04/05/2025', status: 'En attente' },
      { id: 'u2', name: 'Claire Fontaine', email: 'claire.f@gmail.com', date: '03/05/2025', status: 'En attente' },
      { id: 'u3', name: 'Marc Dubois', email: 'marc.d@gmail.com', date: '02/05/2025', status: 'En attente' },
      { id: 'u4', name: 'Julie Moreau', email: 'julie.m@gmail.com', date: '01/05/2025', status: 'En attente' },
      { id: 'u5', name: 'Luc Bernard', email: 'luc.b@gmail.com', date: '30/04/2025', status: 'En attente' },
      { id: 'u6', name: 'Sophie Moreau', email: 'sophie.m@gmail.com', date: '29/04/2025', status: 'En attente' },
      { id: 'u7', name: 'Paul Girard', email: 'paul.g@gmail.com', date: '28/04/2025', status: 'En attente' },
    ]);
    
    // Paramètres de sécurité
    const [securitySettings, setSecuritySettings] = useState({
      requireEmailVerification: true,
      moderateAllPosts: false,
      allowExternalLinks: false,
      restrictContactInfo: true,
      autoDeleteInactive: true
    });
    
    // Fonction pour rafraîchir les données
    const onRefresh = useCallback(async () => {
      setRefreshing(true);
      try {
        await refreshAnnonces();
        await updateNewStatus();
      } catch (error) {
        console.error('Erreur lors du rafraîchissement:', error);
      } finally {
        setRefreshing(false);
      }
    }, [refreshAnnonces, updateNewStatus]);
    
    // Nombre total d'annonces
    const [totalAnnounces, setTotalAnnounces] = useState(0);
    
    // Filter annonces based on category and search
    const filteredAnnonces = useMemo(() => {
      return annonces.filter(item => {
        const matchesCategory = selectedCategory === '0' || 
          item.category === categories.find(cat => cat.id === selectedCategory)?.name;
        
        const matchesSearch = !searchQuery || 
          item.title?.toLowerCase().includes(searchQuery.toLowerCase()) || 
          item.type?.toLowerCase().includes(searchQuery.toLowerCase());
        
        return matchesCategory && matchesSearch;
      });
    }, [annonces, selectedCategory, searchQuery, categories]);
    
    // Fonction pour approuver un utilisateur
    const approveUser = (userId) => {
      Alert.alert(
        "Confirmer l'approbation",
        "Voulez-vous vraiment approuver cet utilisateur ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Approuver", 
            onPress: () => {
              // Logique d'approbation
              const updatedUsers = pendingUsersList.filter(user => user.id !== userId);
              setPendingUsersList(updatedUsers);
              setPendingUsers(pendingUsers - 1);
              setTotalUsers(totalUsers + 1);
              Toast.show({
                type: 'success',
                text1: 'Utilisateur approuvé',
                visibilityTime: 2000,
              });
            }
          }
        ]
      );
    };
    
    // Fonction pour rejeter un utilisateur
    const rejectUser = (userId) => {
      Alert.alert(
        "Confirmer le rejet",
        "Voulez-vous vraiment rejeter cet utilisateur ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Rejeter", 
            onPress: () => {
              // Logique de rejet
              const updatedUsers = pendingUsersList.filter(user => user.id !== userId);
              setPendingUsersList(updatedUsers);
              setPendingUsers(pendingUsers - 1);
              Toast.show({
                type: 'success',
                text1: 'Utilisateur rejeté',
                visibilityTime: 2000,
              });
            }
          }
        ]
      );
    };
    
    // Fonction pour approuver une annonce
    const approveAnnounce = (announceId) => {
      Alert.alert(
        "Approuver l'annonce",
        "Cette annonce sera approuvée et restera visible. Continuer ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Approuver", 
            onPress: () => {
              const updatedAnnounces = annoncesToModerate.filter(announce => announce.id !== announceId);
              setAnnoncesToModerate(updatedAnnounces);
              setFlaggedAnnounces(flaggedAnnounces - 1);
              Toast.show({
                type: 'success',
                text1: 'Annonce approuvée',
                visibilityTime: 2000,
              });
            }
          }
        ]
      );
    };
    
    // Fonction pour rejeter une annonce
    const rejectAnnounce = (announceId) => {
      Alert.alert(
        "Rejeter l'annonce",
        "Cette annonce sera supprimée définitivement. Continuer ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Supprimer", 
            onPress: () => {
              const updatedAnnounces = annoncesToModerate.filter(announce => announce.id !== announceId);
              setAnnoncesToModerate(updatedAnnounces);
              setFlaggedAnnounces(flaggedAnnounces - 1);
              setTotalAnnounces(totalAnnounces - 1);
              Toast.show({
                type: 'success',
                text1: 'Annonce supprimée',
                visibilityTime: 2000,
              });
            }
          }
        ]
      );
    };
    
    // Fonction pour supprimer une annonce
    const handleDeleteAnnonce = useCallback((id) => {
      Alert.alert(
        "Confirmation de suppression",
        "Êtes-vous sûr de vouloir supprimer cette annonce ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          {
            text: "Supprimer",
            style: "destructive",
            onPress: async () => {
              // Afficher un indicateur de chargement pendant la suppression
              
              // Appeler la fonction de suppression du contexte
              const success = await deleteAnnonce(id);
              
              // Afficher un message de succès ou d'erreur
              if (success) {
                Toast.show({
                  type: 'success',
                  text1: 'Annonce supprimée avec succès',
                  visibilityTime: 2000,
                });
                
                // Mettre à jour le nombre total d'annonces
                setTotalAnnounces(prev => prev - 1);
              } else {
                Toast.show({
                  type: 'error',
                  text1: 'Erreur lors de la suppression',
                  text2: 'Veuillez réessayer',
                  visibilityTime: 2000,
                });
              }
            }
          }
        ]
      );
    }, [deleteAnnonce]);
    
    // Fonction pour réinitialiser le système
    const resetSystem = () => {
      Alert.alert(
        "Réinitialisation du système",
        "Cette action supprimera toutes les annonces et réinitialisera les statistiques. Cette action est irréversible et devrait être effectuée une fois par année scolaire. Voulez-vous continuer ?",
        [
          {
            text: "Annuler",
            style: "cancel"
          },
          { 
            text: "Réinitialiser", 
            onPress: () => {
              Alert.alert(
                "Confirmation finale",
                "Dernière vérification : êtes-vous absolument sûr de vouloir réinitialiser le système ?",
                [
                  {
                    text: "Annuler",
                    style: "cancel"
                  },
                  {
                    text: "Réinitialiser",
                    onPress: () => {
                      // Réinitialisation des données
                      setTotalAnnounces(0);
                      setAnnoncesToModerate([]);
                      setVisitStats([0, 0, 0, 0, 0, 0, 0]);
                      setCategoryStats([
                        { name: 'Donner', count: 0, color: '#4CAF50' },
                        { name: 'Prêter', count: 0, color: '#2196F3' },
                        { name: 'Emprunter', count: 0, color: '#FF9800' },
                        { name: 'Louer', count: 0, color: '#9C27B0' },
                        { name: 'Acheter', count: 0, color: '#F44336' },
                        { name: 'Échanger', count: 0, color: '#009688' }
                      ]);
                      setFlaggedAnnounces(0);
                      // On garde les utilisateurs validés
                      Toast.show({
                        type: 'success',
                        text1: 'Système réinitialisé pour la nouvelle année',
                        visibilityTime: 3000,
                      });
                    }
                  }
                ]
              );
            }
          }
        ]
      );
    };
    
    const toggleSetting = (setting) => {
      setSecuritySettings({
        ...securitySettings,
        [setting]: !securitySettings[setting]
      });
    };
    
    // Optimiser les fonctions de rendu pour la FlatList
    const keyExtractor = useCallback((item) => item.id.toString(), []);
    
    const renderItem = useCallback(({ item }) => (
      <AnnonceCard 
        item={item}
        darkMode={darkMode}
        onPress={() => router.push(`/annonce/${item.id}`)}
        onDelete={handleDeleteAnnonce}
      />
    ), [darkMode, handleDeleteAnnonce]);
    
    // Show loading indicator when fonts are loading or data is loading
    if (!fontsLoaded) {
      return (
        <View style={[styles.loadingContainer, {backgroundColor: theme.background}]}>
          <ActivityIndicator size="large" color="#39335E" />
        </View>
      );
    }

    // Fonction de rendu des onglets
    const renderTabContent = () => {
      switch (activeTab) {
        // case 'annonces':
        //   return (
        //     <View style={styles.tabContent}>
        //       {/* En-tête avec filtre et recherche */}
        //       <View style={styles.announcesHeader}>
        //         <Text style={[styles.sectionTitle, {color: theme.color}]}>Liste des annonces</Text>
        //         <Text style={[styles.announcesCount, {color: theme.secondaryText}]}>
        //           {filteredAnnonces.length} annonce{filteredAnnonces.length !== 1 ? 's' : ''}
        //         </Text>
        //       </View>
              
        //       {/* Filtres par catégorie */}
        //       <ScrollView 
        //         horizontal 
        //         showsHorizontalScrollIndicator={false} 
        //         style={styles.categoriesContainer}
        //         contentContainerStyle={styles.categoriesContentContainer}
        //       >
        //         {categories.map(category => (
        //           <TouchableOpacity
        //             key={category.id}
        //             style={[
        //               styles.categoryButton, 
        //               selectedCategory === category.id && styles.activeCategoryButton,
        //               { backgroundColor: darkMode ? '#363636' : '#F0F0F0' }
        //             ]}
        //             onPress={() => setSelectedCategory(category.id)}
        //           >
        //             {category.icon && (
        //               <View style={[
        //                 styles.categoryIconContainer,
        //                 { backgroundColor: selectedCategory === category.id 
        //                   ? (darkMode ? '#ffffff' : '#39335E')
        //                   : (darkMode ? '#5D5FEF' : '#E6E6FA') 
        //                 }
        //               ]}>
        //                 <Ionicons 
        //                   name={category.icon} 
        //                   size={20} 
        //                   color={selectedCategory === category.id 
        //                     ? (darkMode ? '#363636' : '#ffffff')
        //                     : (darkMode ? '#FFFFFF' : '#5D5FEF')
        //                   } 
        //                 />
        //               </View>
        //             )}
        //             <Text 
        //               style={[
        //                 styles.categoryText, 
        //                 selectedCategory === category.id && styles.activeCategoryText,
        //                 {color: selectedCategory === category.id 
        //                   ? '#FFFFFF' 
        //                   : (darkMode ? '#FFFFFF' : '#39335E')
        //                 }
        //               ]}
        //               numberOfLines={1}
        //             >
        //               {category.name}
        //             </Text>
        //           </TouchableOpacity>
        //         ))}
        //       </ScrollView>
              
        //       {/* Barre de recherche */}
        //       <View style={[styles.searchContainer, {backgroundColor: theme.cardbg2 || (darkMode ? '#2A2A2A' : '#F0F0F0')}]}>
        //         <Ionicons name="search" size={22} color={darkMode ? '#888888' : '#666666'} />
        //         <TextInput
        //           style={[styles.searchInput, {color: theme.color}]}
        //           placeholder="Rechercher une annonce..."
        //           placeholderTextColor={darkMode ? '#888888' : '#A8A8A8'}
        //           value={searchQuery}
        //           onChangeText={setSearchQuery}
        //           returnKeyType="search"
        //         />
        //         {searchQuery ? (
        //           <TouchableOpacity onPress={() => setSearchQuery('')}>
        //             <Ionicons name="close-circle" size={22} color={darkMode ? '#888888' : '#666666'} />
        //           </TouchableOpacity>
        //         ) : null}
        //       </View>
              
        //       {/* Liste des annonces */}
        //       {loading ? (
        //         <View style={styles.loadingContainer}>
        //           <ActivityIndicator size="large" color="#39335E" />
        //         </View>
        //       ) : filteredAnnonces.length === 0 ? (
        //         <View style={[styles.emptyContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
        //           <Ionicons name="alert-circle" size={48} color="#FF9800" />
        //           <Text style={[styles.emptyText, {color: theme.color}]}>
        //             Aucune annonce trouvée
        //           </Text>
        //           <Text style={[styles.emptySubtext, {color: theme.secondaryText}]}>
        //             Essayez de modifier vos filtres ou publiez une annonce
        //           </Text>
        //         </View>
        //       ) : (
        //         <FlatList
        //           data={filteredAnnonces}
        //           keyExtractor={keyExtractor}
        //           renderItem={renderItem}
        //           showsVerticalScrollIndicator={false}
        //           contentContainerStyle={styles.announcesListContainer}
        //           refreshControl={
        //             <RefreshControl 
        //               refreshing={refreshing} 
        //               onRefresh={onRefresh}
        //               colors={['#39335E', '#EB001B']}
        //               tintColor={darkMode ? '#FFFFFF' : '#39335E'}
        //             />
        //           }
        //         />
        //       )}
        //     </View>
        //   );
          
        // case 'users':
        //   return (
        //     <View style={styles.tabContent}>
        //       {/* Section validation utilisateurs */}
        //       <View style={styles.usersSection}>
        //         <View style={styles.sectionHeader}>
        //           <Text style={[styles.sectionTitle, {color: theme.color}]}>Validation utilisateurs</Text>
        //           <Text style={[styles.usersCount, {color: theme.secondaryText}]}>{pendingUsers} utilisateur(s) en attente</Text>
        //         </View>
                
        //         {pendingUsersList.length > 0 ? (
        //           pendingUsersList.map(user => (
        //             <View 
        //               key={user.id} 
        //               style={[styles.userCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}
        //             >
        //               <View style={styles.userInfo}>
        //                 <Text style={[styles.userName, {color: theme.color}]}>{user.name}</Text>
        //                 <Text style={[styles.userEmail, {color: theme.secondaryText}]}>{user.email}</Text>
        //                 <Text style={[styles.userDate, {color: theme.secondaryText}]}>Demande le {user.date}</Text>
        //               </View>
                      
        //               <View style={styles.userActions}>
        //                 <TouchableOpacity 
        //                   style={[styles.approveUserButton, {backgroundColor: '#4CAF50'}]}
        //                   onPress={() => approveUser(user.id)}
        //                 >
        //                   <Ionicons name="checkmark" size={16} color="#FFFFFF" />
        //                   <Text style={styles.approveUserButtonText}>Approuver</Text>
        //                 </TouchableOpacity>
        //                 <TouchableOpacity 
        //                   style={[styles.rejectUserButton, {backgroundColor: '#F44336'}]}
        //                   onPress={() => rejectUser(user.id)}
        //                 >
        //                   <Ionicons name="close" size={16} color="#FFFFFF" />
        //                   <Text style={styles.rejectUserButtonText}>Rejeter</Text>
        //                 </TouchableOpacity>
        //               </View>
        //             </View>
        //           ))
        //         ) : (
        //           <View style={[styles.emptyContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
        //             <Ionicons name="checkmark-circle" size={48} color="#4CAF50" />
        //             <Text style={[styles.emptyText, {color: theme.color}]}>
        //               Aucun utilisateur en attente
        //             </Text>
        //           </View>
        //         )}
        //       </View>
        //     </View>
        //   );
          
        case 'settings':
          return (
            <View style={styles.tabContent}>
              {/* Section paramètres de sécurité */}
              <View style={styles.securitySection}>
              <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Paramètres de sécurité</Text>
                </View>
                
                <View style={[styles.securityCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Vérification par email</Text>
                      <Text style={[styles.adminSubtitle,{color: darkMode ? '#5c66f7' : theme.secondaryText}]}>Exiger une vérification d'email avant validation</Text>
                    </View>
                    <Switch
                      value={securitySettings.requireEmailVerification}
                      onValueChange={() => toggleSetting('requireEmailVerification')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                  
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Modérer toutes les annonces</Text>
                      <Text style={[styles.adminSubtitle,{color: darkMode ? '#5c66f7' : theme.secondaryText}]}>Valider manuellement chaque annonce avant publication</Text>
                    </View>
                    <Switch
                      value={securitySettings.moderateAllPosts}
                      onValueChange={() => toggleSetting('moderateAllPosts')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                  
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Liens externes</Text>
                      <Text style={[styles.adminSubtitle,{color: darkMode ? '#5c66f7' : theme.secondaryText}]}>Autoriser les liens externes dans les descriptions</Text>
                    </View>
                    <Switch
                      value={securitySettings.allowExternalLinks}
                      onValueChange={() => toggleSetting('allowExternalLinks')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                  
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Restreindre coordonnées</Text>
                      <Text style={[styles.adminSubtitle,{color: darkMode ? '#5c66f7' : theme.secondaryText}]}>Masquer numéros et emails dans les annonces</Text>
                    </View>
                    <Switch
                      value={securitySettings.restrictContactInfo}
                      onValueChange={() => toggleSetting('restrictContactInfo')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                  
                  <View style={styles.settingItem}>
                    <View style={styles.settingTextContainer}>
                      <Text style={[styles.settingTitle, {color: theme.color}]}>Suppression automatique</Text>
                      <Text style={[styles.adminSubtitle,{color: darkMode ? '#5c66f7' : theme.secondaryText}]}>Supprimer les annonces inactives après 30 jours</Text>
                    </View>
                    <Switch
                      value={securitySettings.autoDeleteInactive}
                      onValueChange={() => toggleSetting('autoDeleteInactive')}
                      trackColor={{ false: "#767577", true: "#5D5FEF" }}
                      thumbColor={"#FFFFFF"}
                    />
                  </View>
                </View>
              </View>
              
              {/* Section maintenance */}
              {/* <View style={styles.maintenanceSection}>
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Maintenance système</Text>
                </View>
                
                <View style={[styles.maintenanceCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <View style={styles.maintenanceIconContainer}>
                    <Ionicons name="refresh-circle" size={48} color="#FF9800" />
                  </View>
                  <Text style={[styles.maintenanceTitle, {color: theme.color}]}>Réinitialisation annuelle</Text>
                  <Text style={[styles.maintenanceDescription, {color: theme.secondaryText}]}>
                    Cette action supprimera toutes les annonces et réinitialisera les statistiques pour la nouvelle année scolaire.
                    Cette opération est irréversible et ne devrait être effectuée qu'une fois par an.
                  </Text>
                  <TouchableOpacity
                    style={[styles.resetButton, {backgroundColor: '#FF9800'}]}
                    onPress={resetSystem}
                  >
                    <Ionicons name="refresh" size={18} color="#FFFFFF" />
                    <Text style={styles.resetButtonText}>Réinitialiser le système</Text>
                  </TouchableOpacity>
                </View>
                
                <View style={[styles.maintenanceCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <View style={styles.maintenanceIconContainer}>
                    <Ionicons name="cloud-download" size={48} color="#2196F3" />
                  </View>
                  <Text style={[styles.maintenanceTitle, {color: theme.color}]}>Sauvegarde des données</Text>
                  <Text style={[styles.maintenanceDescription, {color: theme.secondaryText}]}>
                    Téléchargez une sauvegarde complète des données utilisateurs et des annonces avant
                    la réinitialisation du système.
                  </Text>
                  <TouchableOpacity
                    style={[styles.backupButton, {backgroundColor: '#2196F3'}]}
                  >
                    <Ionicons name="download" size={18} color="#FFFFFF" />
                    <Text style={styles.backupButtonText}>Télécharger la sauvegarde</Text>
                  </TouchableOpacity>
                </View>
              </View> */}


              <View style={styles.logoutSection}>
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Session utilisateur</Text>
                </View>
                
                <View style={[styles.maintenanceCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                  <View style={styles.maintenanceIconContainer}>
                    <Ionicons name="log-out" size={48} color="#E53935" />
                  </View>
                  <Text style={[styles.maintenanceTitle, {color: theme.color}]}>Déconnexion</Text>
                  <Text style={[styles.maintenanceDescription, {color: darkMode ? '#FFFFFF' : theme.secondaryText}]}>
                    Déconnectez-vous de votre compte et retournez à la page de connexion. 
                    Toutes vos données resteront sauvegardées.
                  </Text>
                  <TouchableOpacity
                    style={[styles.logoutButton, {backgroundColor: '#E53935'}]}
                    onPress={handleLogout}
                  >
                    <Ionicons name="exit-outline" size={18} color="#FFFFFF" />
                    <Text style={styles.logoutButtonText}>Se déconnecter</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          );
        
        default:
          // Dashboard par défaut
          return (
            <View style={styles.tabContent}>
              {/* Section statistiques */}
              <View style={styles.statsContainer}>
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, {color: theme.color}]}>Statistiques</Text>
                </View>
                
                <View style={styles.statsCards}>
                  <View style={[styles.statsCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                    <Ionicons name="people" size={28} color="#5D5FEF" />
                    <Text style={[styles.statsNumber, {color: theme.color}]}>{totalUsers}</Text>
                    <Text style={[styles.adminSubtitle,{color: darkMode ? '#FFFFFF' : theme.secondaryText}]}>Utilisateurs</Text>
                  </View>
                  
                  <View style={[styles.statsCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
                    <Ionicons name="document-text" size={28} color="#5D5FEF" />
                    <Text style={[styles.statsNumber, {color: theme.color}]}>{totalAnnounces}</Text>
                    <Text style={[styles.adminSubtitle,{color: darkMode ? '#FFFFFF' : theme.secondaryText}]}>Annonces</Text>
                  </View>
                  
                  <View style={[styles.statsCard, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow, marginLeft: 80 }]}>
                    <Ionicons name="eye" size={28} color="#5D5FEF" />
                    <Text style={[styles.statsNumber, {color: theme.color}]}>{visitStats.reduce((a, b) => a + b, 0)}</Text>
                    <Text style={[styles.adminSubtitle,{color: darkMode ? '#FFFFFF' : theme.secondaryText}]}>Visites (7j)</Text>
                  </View>
                </View>
                
                {/* Graphiques des statistiques */}
                <View ref={lineChartRef} style={[styles.chartContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
  <Text  style={[styles.chartTitle, {color: theme.color}]}>Visites quotidiennes</Text>
  <LineChart
    data={{
      labels: ["Lun", "Mar", "Mer", "Jeu", "Ven", "Sam", "Dim"],
      datasets: [
        {
          data: visitStats.length > 0 ? visitStats : [0, 0, 0, 0, 0, 0, 0],
          color: (opacity = 1) => `rgba(93, 95, 239, ${opacity})`, // #5D5FEF with opacity
          strokeWidth: 2
        }
      ]
    }}
    width={screenWidth - 32} // from react-native
    height={180}
    chartConfig={{
      backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF',
      backgroundGradientFrom: darkMode ? '#2A2A2A' : '#FFFFFF',
      backgroundGradientTo: darkMode ? '#2A2A2A' : '#FFFFFF',
      decimalPlaces: 0,
      color: (opacity = 1) => darkMode ? `rgba(255, 255, 255, ${opacity})` : `rgba(57, 51, 94, ${opacity})`,
      labelColor: (opacity = 1) => darkMode ? `rgba(255, 255, 255, ${opacity})` : `rgba(57, 51, 94, ${opacity})`,
      style: {
        borderRadius: 12
      },
      propsForDots: {
        r: "6",
        strokeWidth: "2",
        stroke: "#5D5FEF"
      }
    }}
    bezier
    style={{
      marginVertical: 8,
      borderRadius: 12
    }}
  />
</View>
                
                <View ref={pieChartRef} style={[styles.chartContainer, { backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF', shadowColor: theme.shadow }]}>
  <Text style={[styles.chartTitle, {color: theme.color}]}>Répartition des annonces</Text>
  <View style={styles.pieChartContainer}>
    <PieChart
      data={categoryStats.map(cat => ({
        name: cat.name,
        population: cat.count,
        color: cat.color,
        legendFontColor: darkMode ? '#FFFFFF' : '#39335E',
        legendFontSize: 12,
        legendFontFamily: 'Montserrat_500Medium'
      }))}
      width={screenWidth - 32}
      height={180}
      chartConfig={{
        backgroundColor: darkMode ? '#2A2A2A' : '#FFFFFF',
        backgroundGradientFrom: darkMode ? '#2A2A2A' : '#FFFFFF',
        backgroundGradientTo: darkMode ? '#2A2A2A' : '#FFFFFF',
        color: (opacity = 1) => darkMode ? `rgba(255, 255, 255, ${opacity})` : `rgba(57, 51, 94, ${opacity})`,
      }}
      accessor={"population"}
      backgroundColor={"transparent"}
      paddingLeft={"0"}
      center={[10, 0]}
      absolute
    />
  </View>
</View>
                
                <TouchableOpacity style={[styles.exportButton, {backgroundColor: '#5D5FEF'}]}  onPress={generateStatsPDF}>
                  <Ionicons name="download" size={20} color="#FFFFFF" />
                  <Text style={styles.exportButtonText}>Exporter les statistiques</Text>
                </TouchableOpacity>
              </View>
              
            </View>
          );
      }
    };

    // Composant principal de l'interface
    return (
      <View style={[styles.container, {backgroundColor: theme.background}]}> 
        <StatusBar translucent backgroundColor="transparent" barStyle={darkMode ? "light-content" : 'dark-content'} />

        {/* En-tête avec profil */}
        <View style={styles.header}>
          <View style={styles.header_left}>
            <Image source={profileImage} style={styles.profile} />
            <View style={styles.content}>
              <Text style={[styles.heading_text, {color: darkMode ? '#FFFFFF' : theme.secondaryText,  fontSize: 18}]}>Tableau de bord Exploitant</Text>
              <Text style={[styles.heading, {color: theme.color}]}>{adminName}</Text>
            </View>
          </View>
          {/* <TouchableOpacity style={styles.notification_box} onPress={() => {}}>
            {darkMode ? <Dark_Notification style={styles.notification} /> : <Notification style={styles.notification} />}
            <View style={styles.circle}>
              <Text style={styles.notification_count}>{flaggedAnnounces + pendingUsers}</Text>
            </View>
          </TouchableOpacity> */}
        </View> 

        {/* Navigation entre les onglets */}
        <View style={styles.tabsContainer}>
          <TouchableOpacity
            style={[
              styles.tab,
              activeTab === 'dashboard' && styles.activeTab,
              { backgroundColor: activeTab === 'dashboard' ? (darkMode ? '#2A2A2A' : '#FFFFFF') : 'transparent' }
            ]}
            onPress={() => setActiveTab('dashboard')}
          >
            <Ionicons
              name="grid"
              size={22}
              color={activeTab === 'dashboard' ? '#5D5FEF' : (darkMode ? '#888888' : '#666666')}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'dashboard' && styles.activeTabText,
                { color: activeTab === 'dashboard' ? '#5D5FEF' : (darkMode ? '#AAAAAA' : '#666666') }
              ]}
            >
              Tableau
            </Text>
          </TouchableOpacity>
          
          {/* <TouchableOpacity
            style={[
              styles.tab,
              activeTab === 'annonces' && styles.activeTab,
              { backgroundColor: activeTab === 'annonces' ? (darkMode ? '#2A2A2A' : '#FFFFFF') : 'transparent' }
            ]}
            onPress={() => setActiveTab('annonces')}
          >
            <Ionicons
              name="document-text"
              size={20}
              color={activeTab === 'annonces' ? '#5D5FEF' : (darkMode ? '#888888' : '#666666')}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'annonces' && styles.activeTabText,
                { color: activeTab === 'annonces' ? '#5D5FEF' : (darkMode ? '#AAAAAA' : '#666666') }
              ]}
            >
              Annonces
            </Text>
          </TouchableOpacity> */}
          
          {/* <TouchableOpacity
            style={[
              styles.tab,
              activeTab === 'users' && styles.activeTab,
              { backgroundColor: activeTab === 'users' ? (darkMode ? '#2A2A2A' : '#FFFFFF') : 'transparent' }
            ]}
            onPress={() => setActiveTab('users')}
          >
            <Ionicons
              name="people"
              size={19}
              color={activeTab === 'users' ? '#5D5FEF' : (darkMode ? '#888888' : '#666666')}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'users' && styles.activeTabText,
                { color: activeTab === 'users' ? '#5D5FEF' : (darkMode ? '#AAAAAA' : '#666666') }
              ]}
            >
              Utilisateurs
            </Text>
          </TouchableOpacity> */}
          
          <TouchableOpacity
            style={[
              styles.tab,
              activeTab === 'settings' && styles.activeTab,
              { backgroundColor: activeTab === 'settings' ? (darkMode ? '#2A2A2A' : '#FFFFFF') : 'transparent' }
            ]}
            onPress={() => setActiveTab('settings')}
          >
            <Ionicons
              name="settings"
              size={19}
              color={activeTab === 'settings' ? '#5D5FEF' : (darkMode ? '#888888' : '#666666')}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'settings' && styles.activeTabText,
                { color: activeTab === 'settings' ? '#5D5FEF' : (darkMode ? '#AAAAAA' : '#666666') }
              ]}
            >
              Paramètres
            </Text>
          </TouchableOpacity>
        </View>

        {/* Contenu principal qui change selon l'onglet sélectionné */}
        <ScrollView 
          showsVerticalScrollIndicator={false} 
          contentContainerStyle={styles.scrollContent}
          refreshControl={
            <RefreshControl 
              refreshing={refreshing} 
              onRefresh={onRefresh}
              colors={['#39335E', '#EB001B']}
              tintColor={darkMode ? '#FFFFFF' : '#39335E'}
            />
          }
        >
          <View style={styles.adminHeader}>
            <Text style={[styles.adminTitle, {color: theme.color}]}>Bourse au prêt - Administration</Text>
            <Text
  style={[
    styles.adminSubtitle,
    {
      color: darkMode ? '#FFFFFF' : theme.secondaryText
    }
  ]}
>
  Gestion, modération et statistiques
</Text>

          </View>
          
          {/* Contenu de l'onglet actif */}
          {renderTabContent()}
        </ScrollView>
      </View>
    );
};

export default AdminDashboard;




const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 60,
    paddingHorizontal: 16,
  },
  scrollContent: {
    paddingBottom: 40,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 15,
    marginBottom: 20,
  },
  header_left: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  profile: {
    width: 50,
    height: 50,
    borderRadius: 25,
    marginRight: 12,
    borderWidth: 2,
    borderColor: '#5D5FEF',
  },
  content: {
    justifyContent: 'center',
  },
  heading_text: {
    fontSize: 14,
    fontWeight: '500',
    marginBottom: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  heading: {
    fontSize: 20,
    fontWeight: '700',
    fontFamily: 'Montserrat_700Bold',
  },
  notification_box: {
    position: 'relative',
    width: 44,
    height: 44,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F0F2F5',
    borderRadius: 12,
  },
  notification: {
    width: 24,
    height: 24,
  },
  circle: {
    position: 'absolute',
    top: -4,
    right: -4,
    backgroundColor: '#F44336',
    borderRadius: 12,
    width: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#FFFFFF',
  },
  notification_count: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  adminHeader: {
    marginBottom: 24,
    alignItems: 'center',
  },
  adminTitle: {
    fontSize: 26,
    fontWeight: '700',
    marginBottom: 8,
    fontFamily: 'Montserrat_700Bold',
  },
  adminSubtitle: {
    fontSize: 16,
    fontWeight: '400',
    fontFamily: 'Montserrat_500Medium',
  },
  // Styles pour les onglets
  tabsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
    borderRadius: 12,
    padding: 5,
    backgroundColor: 'rgba(200, 200, 200, 0.1)',
  },
  tab: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 10,
    borderRadius: 10,
    flexDirection: 'row',
    justifyContent: 'center',
  },
  activeTab: {
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  tabText: {
    marginLeft: 6,
    fontSize: 19,
    marginLeft: 1,
    fontFamily: 'Montserrat_600SemiBold',
  },
  activeTabText: {
    fontFamily: 'Montserrat_700Bold',
  },
  tabContent: {
    flex: 1,
  },
  // Styles pour le tableau de bord
  statsContainer: {
    marginBottom: 32,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  statsCards: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  statsCard: {
    width: '48%',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    alignItems: 'center',
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  statsNumber: {
    fontSize: 24,
    fontWeight: '700',
    marginVertical: 8,
    fontFamily: 'Montserrat_700Bold',
  },
  statsLabel: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  chartContainer: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 20,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  chartTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 12,
    fontFamily: 'Montserrat_600SemiBold',
  },
  chartPlaceholder: {
    height: 150,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F0F2F5',
    borderRadius: 8,
  },
  exportButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
    borderRadius: 12,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  exportButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  // Styles pour la section de modération
  moderationSection: {
    marginBottom: 32,
  },
  moderationCount: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  moderationCard: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  moderationHeader: {
    marginBottom: 12,
  },
  moderationTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  moderationTitle: {
    fontSize: 18,
    fontWeight: '600',
    flex: 1,
    fontFamily: 'Montserrat_600SemiBold',
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  statusText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  moderationDate: {
    fontSize: 14,
    fontWeight: '400',
    marginBottom: 8,
    fontFamily: 'Montserrat_500Medium',
  },
  moderationReason: {
    fontSize: 14,
    marginBottom: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  moderationReporter: {
    fontSize: 14,
    fontFamily: 'Montserrat_500Medium',
  },
  moderationDetails: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12,
  },
  moderationDetail: {
    width: '50%',
    marginBottom: 8,
  },
  moderationDetailLabel: {
    fontSize: 14,
    fontWeight: '500',
    marginBottom: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  moderationDetailValue: {
    fontSize: 14,
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  moderationActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  viewButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  viewButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  approveButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  approveButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  rejectButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
  },
  rejectButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  emptyContainer: {
    padding: 24,
    borderRadius: 12,
    alignItems: 'center',
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  emptyText: {
    fontSize: 16,
    fontWeight: '500',
    marginTop: 12,
    textAlign: 'center',
    fontFamily: 'Montserrat_500Medium',
  },
  emptySubtext: {
    fontSize: 14,
    marginTop: 8,
    textAlign: 'center',
    fontFamily: 'Montserrat_500Medium',
  },
  // Styles pour la section users
  usersSection: {
    marginBottom: 32,
  },
  usersCount: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  userCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  userInfo: {
    flex: 1,
  },
  userName: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
    fontFamily: 'Montserrat_600SemiBold',
  },
  userEmail: {
    fontSize: 14,
    fontWeight: '400',
    marginBottom: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  userDate: {
    fontSize: 14,
    fontWeight: '400',
    fontFamily: 'Montserrat_500Medium',
  },
  userActions: {
    flexDirection: 'row',
  },
  approveUserButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  approveUserButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  rejectUserButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 8,
  },
  rejectUserButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  // Styles pour la section security
  securitySection: {
    marginBottom: 32,
  },
  securityCard: {
    padding: 16,
    borderRadius: 12,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  settingTextContainer: {
    flex: 1,
    marginRight: 12,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
    fontFamily: 'Montserrat_600SemiBold',
  },
  settingDescription: {
    fontSize: 14,
    fontWeight: '400',
    fontFamily: 'Montserrat_500Medium',
  },
  // Styles pour la section maintenance
  maintenanceSection: {
    marginBottom: 32,
  },
  maintenanceCard: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    alignItems: 'center',
  },
  maintenanceIconContainer: {
    marginBottom: 12,
  },
  maintenanceTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  maintenanceDescription: {
    fontSize: 14,
    fontWeight: '400',
    textAlign: 'center',
    marginBottom: 16,
    fontFamily: 'Montserrat_500Medium',
  },
  resetButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
    borderRadius: 12,
    width: '80%',
  },
  resetButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  backupButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
    borderRadius: 12,
    width: '80%',
  },
  backupButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
    fontFamily: 'Montserrat_600SemiBold',
  },
  // Styles pour les annonces
  announceCard: {
    flexDirection: 'row',
    borderRadius: 12,
    marginBottom: 16,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    overflow: 'hidden',
  },
  cardImageContainer: {
    width: 120,
    height: 120,
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  cardImage: {
    width: '100%',
    height: '100%',
  },
  placeholderImageContainer: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  categoryBadgeContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    paddingVertical: 4,
    paddingHorizontal: 8,
    alignItems: 'center',
  },
  categoryBadge: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  cardContent: {
    flex: 1,
    padding: 12,
    justifyContent: 'space-between',
  },
  cardTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
    fontFamily: 'Montserrat_600SemiBold',
  },
  cardType: {
    fontSize: 14,
    marginBottom: 8,
    fontFamily: 'Montserrat_500Medium',
  },
  cardFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  cardDate: {
    fontSize: 12,
    fontFamily: 'Montserrat_500Medium',
  },
  deleteButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F44336',
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 6,
  },
  deleteButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    marginLeft: 4,
    fontFamily: 'Montserrat_500Medium',
  },
  // Styles pour annonces list
  announcesHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  announcesCount: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  categoriesContainer: {
    marginBottom: 16,
  },
  categoriesContentContainer: {
    paddingRight: 16,
  },
  categoryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 25,
    marginRight: 10,
  },
  activeCategoryButton: {
    backgroundColor: '#5D5FEF',
  },
  categoryIconContainer: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 8,
  },
  categoryText: {
    fontSize: 14,
    fontWeight: '500',
    fontFamily: 'Montserrat_500Medium',
  },
  activeCategoryText: {
    fontWeight: '600',
    fontFamily: 'Montserrat_600SemiBold',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 12,
    marginBottom: 16,
  },
  searchInput: {
    flex: 1,
    marginLeft: 10,
    fontSize: 16,
    fontFamily: 'Montserrat_500Medium',
  },
  announcesListContainer: {
    paddingBottom: 20,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  logoutSection: {
    marginBottom: 20,
  },
  logoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 15,
  },
  logoutButtonText: {
    color: '#FFFFFF',
    fontWeight: '600',
    fontSize: 16,
    marginLeft: 8,
  },
  pieChartContainer: {
  alignItems: 'center',
  justifyContent: 'center',
},
periodFilterContainer: {
  flexDirection: 'row',
  marginBottom: 12,
  alignSelf: 'center',
},
periodButton: {
  paddingHorizontal: 16,
  paddingVertical: 8,
  borderRadius: 20,
  marginHorizontal: 4,
  backgroundColor: '#F0F0F0',
},
activePeriodButton: {
  backgroundColor: '#5D5FEF',
},
periodButtonText: {
  fontSize: 14,
  color: '#666666',
  fontFamily: 'Montserrat_500Medium',
},
activePeriodButtonText: {
  color: '#FFFFFF',
  fontFamily: 'Montserrat_600SemiBold',
},
  
});